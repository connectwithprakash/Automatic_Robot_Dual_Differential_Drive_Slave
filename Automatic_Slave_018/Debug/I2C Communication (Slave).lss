
I2C Communication (Slave).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00001214  000012a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  00800202  00800202  000012aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f16  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001395  00000000  00000000  000044aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001507  00000000  00000000  0000583f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000814  00000000  00000000  00006d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000110b  00000000  00000000  0000755c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000178e  00000000  00000000  00008667  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00009df5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
       a:	00 00       	nop
       c:	fe c0       	rjmp	.+508    	; 0x20a <__vector_3>
       e:	00 00       	nop
      10:	23 c1       	rjmp	.+582    	; 0x258 <__vector_4>
      12:	00 00       	nop
      14:	ac c0       	rjmp	.+344    	; 0x16e <__vector_5>
      16:	00 00       	nop
      18:	d1 c0       	rjmp	.+418    	; 0x1bc <__vector_6>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	f3 c4       	rjmp	.+2534   	; 0xa0c <__vector_9>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b0 c6       	rjmp	.+3424   	; 0xd9e <__vector_15>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__vector_23>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	ce c6       	rjmp	.+3484   	; 0xe02 <__vector_25>
      66:	00 00       	nop
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d2 c6       	rjmp	.+3492   	; 0xe36 <__vector_36>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c4 c6       	rjmp	.+3464   	; 0xe56 <__vector_51>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f2 c6       	rjmp	.+3556   	; 0xebe <__vector_54>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	2d 05       	cpc	r18, r13

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	e4 e1       	ldi	r30, 0x14	; 20
      fe:	f2 e1       	ldi	r31, 0x12	; 18
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	a2 30       	cpi	r26, 0x02	; 2
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	a2 e0       	ldi	r26, 0x02	; 2
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ab 39       	cpi	r26, 0x9B	; 155
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 00 09 	call	0x1200	; 0x1200 <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	fb d3       	rcall	.+2038   	; 0x938 <main>
     142:	0c 94 08 09 	jmp	0x1210	; 0x1210 <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_ZN7encoder22Init_encoder_interruptEv>:
}
float encoder::getdistance()
	{
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
	return distance;
}
     148:	78 94       	sei
     14a:	8f ef       	ldi	r24, 0xFF	; 255
     14c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     150:	8f e0       	ldi	r24, 0x0F	; 15
     152:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     156:	8d b3       	in	r24, 0x1d	; 29
     158:	8c 63       	ori	r24, 0x3C	; 60
     15a:	8d bb       	out	0x1d, r24	; 29
     15c:	08 95       	ret

0000015e <_ZN7encoder10Init_timerEv>:
     15e:	78 94       	sei
     160:	85 b5       	in	r24, 0x25	; 37
     162:	85 60       	ori	r24, 0x05	; 5
     164:	85 bd       	out	0x25, r24	; 37
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     16c:	08 95       	ret

0000016e <__vector_5>:

ISR(INT4_vect)	//for motor1
{
     16e:	1f 92       	push	r1
     170:	0f 92       	push	r0
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	0f 92       	push	r0
     176:	11 24       	eor	r1, r1
     178:	0b b6       	in	r0, 0x3b	; 59
     17a:	0f 92       	push	r0
     17c:	8f 93       	push	r24
     17e:	9f 93       	push	r25
     180:	ef 93       	push	r30
     182:	ff 93       	push	r31
	if((bit_is_set(PINA,PA4)))
     184:	04 9b       	sbis	0x00, 4	; 0
     186:	08 c0       	rjmp	.+16     	; 0x198 <__vector_5+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     188:	ea e1       	ldi	r30, 0x1A	; 26
     18a:	f2 e0       	ldi	r31, 0x02	; 2
     18c:	80 81       	ld	r24, Z
     18e:	91 81       	ldd	r25, Z+1	; 0x01
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	91 83       	std	Z+1, r25	; 0x01
     194:	80 83       	st	Z, r24
     196:	07 c0       	rjmp	.+14     	; 0x1a6 <__vector_5+0x38>
		inline void dcr_count(){count_encoder--;};
     198:	ea e1       	ldi	r30, 0x1A	; 26
     19a:	f2 e0       	ldi	r31, 0x02	; 2
     19c:	80 81       	ld	r24, Z
     19e:	91 81       	ldd	r25, Z+1	; 0x01
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	91 83       	std	Z+1, r25	; 0x01
     1a4:	80 83       	st	Z, r24
		e1.inc_count();
	}
	else
	e1.dcr_count();

}
     1a6:	ff 91       	pop	r31
     1a8:	ef 91       	pop	r30
     1aa:	9f 91       	pop	r25
     1ac:	8f 91       	pop	r24
     1ae:	0f 90       	pop	r0
     1b0:	0b be       	out	0x3b, r0	; 59
     1b2:	0f 90       	pop	r0
     1b4:	0f be       	out	0x3f, r0	; 63
     1b6:	0f 90       	pop	r0
     1b8:	1f 90       	pop	r1
     1ba:	18 95       	reti

000001bc <__vector_6>:
ISR(INT5_vect)	//for motor2
{
     1bc:	1f 92       	push	r1
     1be:	0f 92       	push	r0
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	0f 92       	push	r0
     1c4:	11 24       	eor	r1, r1
     1c6:	0b b6       	in	r0, 0x3b	; 59
     1c8:	0f 92       	push	r0
     1ca:	8f 93       	push	r24
     1cc:	9f 93       	push	r25
     1ce:	ef 93       	push	r30
     1d0:	ff 93       	push	r31
	if((bit_is_set(PINA,PA1)))
     1d2:	01 9b       	sbis	0x00, 1	; 0
     1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     1d6:	e2 e1       	ldi	r30, 0x12	; 18
     1d8:	f2 e0       	ldi	r31, 0x02	; 2
     1da:	80 81       	ld	r24, Z
     1dc:	91 81       	ldd	r25, Z+1	; 0x01
     1de:	01 96       	adiw	r24, 0x01	; 1
     1e0:	91 83       	std	Z+1, r25	; 0x01
     1e2:	80 83       	st	Z, r24
     1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     1e6:	e2 e1       	ldi	r30, 0x12	; 18
     1e8:	f2 e0       	ldi	r31, 0x02	; 2
     1ea:	80 81       	ld	r24, Z
     1ec:	91 81       	ldd	r25, Z+1	; 0x01
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	91 83       	std	Z+1, r25	; 0x01
     1f2:	80 83       	st	Z, r24
	{
		e2.inc_count();
	}
	else
	e2.dcr_count();
}
     1f4:	ff 91       	pop	r31
     1f6:	ef 91       	pop	r30
     1f8:	9f 91       	pop	r25
     1fa:	8f 91       	pop	r24
     1fc:	0f 90       	pop	r0
     1fe:	0b be       	out	0x3b, r0	; 59
     200:	0f 90       	pop	r0
     202:	0f be       	out	0x3f, r0	; 63
     204:	0f 90       	pop	r0
     206:	1f 90       	pop	r1
     208:	18 95       	reti

0000020a <__vector_3>:
ISR(INT2_vect)	//for motor3
{
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
     214:	0b b6       	in	r0, 0x3b	; 59
     216:	0f 92       	push	r0
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
	if((bit_is_set(PINA,PA2)))
     220:	02 9b       	sbis	0x00, 2	; 0
     222:	08 c0       	rjmp	.+16     	; 0x234 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     224:	ea e0       	ldi	r30, 0x0A	; 10
     226:	f2 e0       	ldi	r31, 0x02	; 2
     228:	80 81       	ld	r24, Z
     22a:	91 81       	ldd	r25, Z+1	; 0x01
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	91 83       	std	Z+1, r25	; 0x01
     230:	80 83       	st	Z, r24
     232:	07 c0       	rjmp	.+14     	; 0x242 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     234:	ea e0       	ldi	r30, 0x0A	; 10
     236:	f2 e0       	ldi	r31, 0x02	; 2
     238:	80 81       	ld	r24, Z
     23a:	91 81       	ldd	r25, Z+1	; 0x01
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	91 83       	std	Z+1, r25	; 0x01
     240:	80 83       	st	Z, r24
	{
		e3.inc_count();
	}
	else
		e3.dcr_count();
}
     242:	ff 91       	pop	r31
     244:	ef 91       	pop	r30
     246:	9f 91       	pop	r25
     248:	8f 91       	pop	r24
     24a:	0f 90       	pop	r0
     24c:	0b be       	out	0x3b, r0	; 59
     24e:	0f 90       	pop	r0
     250:	0f be       	out	0x3f, r0	; 63
     252:	0f 90       	pop	r0
     254:	1f 90       	pop	r1
     256:	18 95       	reti

00000258 <__vector_4>:
ISR(INT3_vect)	//for motor4
{
     258:	1f 92       	push	r1
     25a:	0f 92       	push	r0
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	0f 92       	push	r0
     260:	11 24       	eor	r1, r1
     262:	0b b6       	in	r0, 0x3b	; 59
     264:	0f 92       	push	r0
     266:	8f 93       	push	r24
     268:	9f 93       	push	r25
     26a:	ef 93       	push	r30
     26c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA3)))
     26e:	03 9b       	sbis	0x00, 3	; 0
     270:	08 c0       	rjmp	.+16     	; 0x282 <__vector_4+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     272:	e2 e0       	ldi	r30, 0x02	; 2
     274:	f2 e0       	ldi	r31, 0x02	; 2
     276:	80 81       	ld	r24, Z
     278:	91 81       	ldd	r25, Z+1	; 0x01
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	91 83       	std	Z+1, r25	; 0x01
     27e:	80 83       	st	Z, r24
     280:	07 c0       	rjmp	.+14     	; 0x290 <__vector_4+0x38>
		inline void dcr_count(){count_encoder--;};
     282:	e2 e0       	ldi	r30, 0x02	; 2
     284:	f2 e0       	ldi	r31, 0x02	; 2
     286:	80 81       	ld	r24, Z
     288:	91 81       	ldd	r25, Z+1	; 0x01
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	91 83       	std	Z+1, r25	; 0x01
     28e:	80 83       	st	Z, r24
	{
		e4.inc_count();
	}
	else
	e4.dcr_count();
}
     290:	ff 91       	pop	r31
     292:	ef 91       	pop	r30
     294:	9f 91       	pop	r25
     296:	8f 91       	pop	r24
     298:	0f 90       	pop	r0
     29a:	0b be       	out	0x3b, r0	; 59
     29c:	0f 90       	pop	r0
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	0f 90       	pop	r0
     2a2:	1f 90       	pop	r1
     2a4:	18 95       	reti

000002a6 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     2a6:	1f 92       	push	r1
     2a8:	0f 92       	push	r0
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	0f 92       	push	r0
     2ae:	11 24       	eor	r1, r1
     2b0:	0b b6       	in	r0, 0x3b	; 59
     2b2:	0f 92       	push	r0
     2b4:	8f 93       	push	r24
     2b6:	9f 93       	push	r25
     2b8:	ef 93       	push	r30
     2ba:	ff 93       	push	r31
	//datacount++;
	//
		//
		//
 	//if(datacount == 2){
		 PidUpdateFlagMotor = true;
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <PidUpdateFlagMotor>
		inline void resetCount(){count_encoder = 0;};
		inline void setspeed(){
			speed = count_encoder;
     2c2:	ea e1       	ldi	r30, 0x1A	; 26
     2c4:	f2 e0       	ldi	r31, 0x02	; 2
     2c6:	80 81       	ld	r24, Z
     2c8:	91 81       	ldd	r25, Z+1	; 0x01
     2ca:	93 83       	std	Z+3, r25	; 0x03
     2cc:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     2ce:	11 82       	std	Z+1, r1	; 0x01
     2d0:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		inline void setspeed(){
			speed = count_encoder;
     2d2:	e2 e1       	ldi	r30, 0x12	; 18
     2d4:	f2 e0       	ldi	r31, 0x02	; 2
     2d6:	80 81       	ld	r24, Z
     2d8:	91 81       	ldd	r25, Z+1	; 0x01
     2da:	93 83       	std	Z+3, r25	; 0x03
     2dc:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     2de:	11 82       	std	Z+1, r1	; 0x01
     2e0:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		inline void setspeed(){
			speed = count_encoder;
     2e2:	ea e0       	ldi	r30, 0x0A	; 10
     2e4:	f2 e0       	ldi	r31, 0x02	; 2
     2e6:	80 81       	ld	r24, Z
     2e8:	91 81       	ldd	r25, Z+1	; 0x01
     2ea:	93 83       	std	Z+3, r25	; 0x03
     2ec:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     2ee:	11 82       	std	Z+1, r1	; 0x01
     2f0:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		inline void setspeed(){
			speed = count_encoder;
     2f2:	e2 e0       	ldi	r30, 0x02	; 2
     2f4:	f2 e0       	ldi	r31, 0x02	; 2
     2f6:	80 81       	ld	r24, Z
     2f8:	91 81       	ldd	r25, Z+1	; 0x01
     2fa:	93 83       	std	Z+3, r25	; 0x03
     2fc:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     2fe:	11 82       	std	Z+1, r1	; 0x01
     300:	10 82       	st	Z, r1
	e1.setspeed();
	e2.setspeed();
	e3.setspeed();
	e4.setspeed();
	
     302:	ff 91       	pop	r31
     304:	ef 91       	pop	r30
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	0f 90       	pop	r0
     30c:	0b be       	out	0x3b, r0	; 59
     30e:	0f 90       	pop	r0
     310:	0f be       	out	0x3f, r0	; 63
     312:	0f 90       	pop	r0
     314:	1f 90       	pop	r1
     316:	18 95       	reti

00000318 <_Z12setTuningsM1a>:
UART3TransmitData(md.ki * 100);
UART3TransmitString(" ");
UART3TransmitData(md.kd * 2);

UART3TransmitString("\r\n");
}
     318:	4f 92       	push	r4
     31a:	5f 92       	push	r5
     31c:	6f 92       	push	r6
     31e:	7f 92       	push	r7
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	af 92       	push	r10
     326:	bf 92       	push	r11
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <e1+0x2>
     33c:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <e1+0x3>
     340:	c4 e7       	ldi	r28, 0x74	; 116
     342:	d2 e0       	ldi	r29, 0x02	; 2
     344:	3d 87       	std	Y+13, r19	; 0x0d
     346:	2c 87       	std	Y+12, r18	; 0x0c
     348:	08 2f       	mov	r16, r24
     34a:	88 0f       	add	r24, r24
     34c:	11 0b       	sbc	r17, r17
     34e:	02 1b       	sub	r16, r18
     350:	13 0b       	sbc	r17, r19
     352:	19 8b       	std	Y+17, r17	; 0x11
     354:	08 8b       	std	Y+16, r16	; 0x10
     356:	b8 01       	movw	r22, r16
     358:	01 2e       	mov	r0, r17
     35a:	00 0c       	add	r0, r0
     35c:	88 0b       	sbc	r24, r24
     35e:	99 0b       	sbc	r25, r25
     360:	60 d6       	rcall	.+3264   	; 0x1022 <__floatsisf>
     362:	4b 01       	movw	r8, r22
     364:	5c 01       	movw	r10, r24
     366:	2c 81       	ldd	r18, Y+4	; 0x04
     368:	3d 81       	ldd	r19, Y+5	; 0x05
     36a:	4e 81       	ldd	r20, Y+6	; 0x06
     36c:	5f 81       	ldd	r21, Y+7	; 0x07
     36e:	e5 d6       	rcall	.+3530   	; 0x113a <__mulsf3>
     370:	2a 89       	ldd	r18, Y+18	; 0x12
     372:	3b 89       	ldd	r19, Y+19	; 0x13
     374:	4c 89       	ldd	r20, Y+20	; 0x14
     376:	5d 89       	ldd	r21, Y+21	; 0x15
     378:	bd d5       	rcall	.+2938   	; 0xef4 <__addsf3>
     37a:	6b 01       	movw	r12, r22
     37c:	7c 01       	movw	r14, r24
     37e:	6a 8b       	std	Y+18, r22	; 0x12
     380:	7b 8b       	std	Y+19, r23	; 0x13
     382:	8c 8b       	std	Y+20, r24	; 0x14
     384:	9d 8b       	std	Y+21, r25	; 0x15
     386:	8e 89       	ldd	r24, Y+22	; 0x16
     388:	9f 89       	ldd	r25, Y+23	; 0x17
     38a:	b8 01       	movw	r22, r16
     38c:	68 1b       	sub	r22, r24
     38e:	79 0b       	sbc	r23, r25
     390:	07 2e       	mov	r0, r23
     392:	00 0c       	add	r0, r0
     394:	88 0b       	sbc	r24, r24
     396:	99 0b       	sbc	r25, r25
     398:	44 d6       	rcall	.+3208   	; 0x1022 <__floatsisf>
     39a:	28 85       	ldd	r18, Y+8	; 0x08
     39c:	39 85       	ldd	r19, Y+9	; 0x09
     39e:	4a 85       	ldd	r20, Y+10	; 0x0a
     3a0:	5b 85       	ldd	r21, Y+11	; 0x0b
     3a2:	cb d6       	rcall	.+3478   	; 0x113a <__mulsf3>
     3a4:	2b 01       	movw	r4, r22
     3a6:	3c 01       	movw	r6, r24
     3a8:	28 81       	ld	r18, Y
     3aa:	39 81       	ldd	r19, Y+1	; 0x01
     3ac:	4a 81       	ldd	r20, Y+2	; 0x02
     3ae:	5b 81       	ldd	r21, Y+3	; 0x03
     3b0:	c5 01       	movw	r24, r10
     3b2:	b4 01       	movw	r22, r8
     3b4:	c2 d6       	rcall	.+3460   	; 0x113a <__mulsf3>
     3b6:	a7 01       	movw	r20, r14
     3b8:	96 01       	movw	r18, r12
     3ba:	9c d5       	rcall	.+2872   	; 0xef4 <__addsf3>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	c3 01       	movw	r24, r6
     3c2:	b2 01       	movw	r22, r4
     3c4:	97 d5       	rcall	.+2862   	; 0xef4 <__addsf3>
     3c6:	fa d5       	rcall	.+3060   	; 0xfbc <__fixsfsi>
     3c8:	7f 87       	std	Y+15, r23	; 0x0f
     3ca:	6e 87       	std	Y+14, r22	; 0x0e
     3cc:	1f 8b       	std	Y+23, r17	; 0x17
     3ce:	0e 8b       	std	Y+22, r16	; 0x16
     3d0:	28 8d       	ldd	r18, Y+24	; 0x18
     3d2:	39 8d       	ldd	r19, Y+25	; 0x19
     3d4:	62 0f       	add	r22, r18
     3d6:	73 1f       	adc	r23, r19
     3d8:	cb 01       	movw	r24, r22
     3da:	77 23       	and	r23, r23
     3dc:	24 f4       	brge	.+8      	; 0x3e6 <_Z12setTuningsM1a+0xce>
     3de:	88 27       	eor	r24, r24
     3e0:	99 27       	eor	r25, r25
     3e2:	86 1b       	sub	r24, r22
     3e4:	97 0b       	sbc	r25, r23
     3e6:	8a 3f       	cpi	r24, 0xFA	; 250
     3e8:	91 05       	cpc	r25, r1
     3ea:	2c f4       	brge	.+10     	; 0x3f6 <_Z12setTuningsM1a+0xde>
     3ec:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <ma+0x19>
     3f0:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <ma+0x18>
     3f4:	10 c0       	rjmp	.+32     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3f6:	16 16       	cp	r1, r22
     3f8:	17 06       	cpc	r1, r23
     3fa:	3c f4       	brge	.+14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3fc:	89 ef       	ldi	r24, 0xF9	; 249
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <ma+0x19>
     404:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <ma+0x18>
     408:	06 c0       	rjmp	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     40a:	87 e0       	ldi	r24, 0x07	; 7
     40c:	9f ef       	ldi	r25, 0xFF	; 255
     40e:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <ma+0x19>
     412:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <ma+0x18>
     416:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <ma+0x18>
     41a:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <ma+0x19>
     41e:	85 e2       	ldi	r24, 0x25	; 37
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	81 d4       	rcall	.+2306   	; 0xd26 <_ZN5Motor11SetOcrValueEi>
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	bf 90       	pop	r11
     436:	af 90       	pop	r10
     438:	9f 90       	pop	r9
     43a:	8f 90       	pop	r8
     43c:	7f 90       	pop	r7
     43e:	6f 90       	pop	r6
     440:	5f 90       	pop	r5
     442:	4f 90       	pop	r4
     444:	08 95       	ret

00000446 <_Z12setTuningsM2a>:
     446:	4f 92       	push	r4
     448:	5f 92       	push	r5
     44a:	6f 92       	push	r6
     44c:	7f 92       	push	r7
     44e:	8f 92       	push	r8
     450:	9f 92       	push	r9
     452:	af 92       	push	r10
     454:	bf 92       	push	r11
     456:	cf 92       	push	r12
     458:	df 92       	push	r13
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <e2+0x2>
     46a:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <e2+0x3>
     46e:	ca e5       	ldi	r28, 0x5A	; 90
     470:	d2 e0       	ldi	r29, 0x02	; 2
     472:	3d 87       	std	Y+13, r19	; 0x0d
     474:	2c 87       	std	Y+12, r18	; 0x0c
     476:	08 2f       	mov	r16, r24
     478:	88 0f       	add	r24, r24
     47a:	11 0b       	sbc	r17, r17
     47c:	02 1b       	sub	r16, r18
     47e:	13 0b       	sbc	r17, r19
     480:	19 8b       	std	Y+17, r17	; 0x11
     482:	08 8b       	std	Y+16, r16	; 0x10
     484:	b8 01       	movw	r22, r16
     486:	01 2e       	mov	r0, r17
     488:	00 0c       	add	r0, r0
     48a:	88 0b       	sbc	r24, r24
     48c:	99 0b       	sbc	r25, r25
     48e:	c9 d5       	rcall	.+2962   	; 0x1022 <__floatsisf>
     490:	4b 01       	movw	r8, r22
     492:	5c 01       	movw	r10, r24
     494:	2c 81       	ldd	r18, Y+4	; 0x04
     496:	3d 81       	ldd	r19, Y+5	; 0x05
     498:	4e 81       	ldd	r20, Y+6	; 0x06
     49a:	5f 81       	ldd	r21, Y+7	; 0x07
     49c:	4e d6       	rcall	.+3228   	; 0x113a <__mulsf3>
     49e:	2a 89       	ldd	r18, Y+18	; 0x12
     4a0:	3b 89       	ldd	r19, Y+19	; 0x13
     4a2:	4c 89       	ldd	r20, Y+20	; 0x14
     4a4:	5d 89       	ldd	r21, Y+21	; 0x15
     4a6:	26 d5       	rcall	.+2636   	; 0xef4 <__addsf3>
     4a8:	6b 01       	movw	r12, r22
     4aa:	7c 01       	movw	r14, r24
     4ac:	6a 8b       	std	Y+18, r22	; 0x12
     4ae:	7b 8b       	std	Y+19, r23	; 0x13
     4b0:	8c 8b       	std	Y+20, r24	; 0x14
     4b2:	9d 8b       	std	Y+21, r25	; 0x15
     4b4:	8e 89       	ldd	r24, Y+22	; 0x16
     4b6:	9f 89       	ldd	r25, Y+23	; 0x17
     4b8:	b8 01       	movw	r22, r16
     4ba:	68 1b       	sub	r22, r24
     4bc:	79 0b       	sbc	r23, r25
     4be:	07 2e       	mov	r0, r23
     4c0:	00 0c       	add	r0, r0
     4c2:	88 0b       	sbc	r24, r24
     4c4:	99 0b       	sbc	r25, r25
     4c6:	ad d5       	rcall	.+2906   	; 0x1022 <__floatsisf>
     4c8:	28 85       	ldd	r18, Y+8	; 0x08
     4ca:	39 85       	ldd	r19, Y+9	; 0x09
     4cc:	4a 85       	ldd	r20, Y+10	; 0x0a
     4ce:	5b 85       	ldd	r21, Y+11	; 0x0b
     4d0:	34 d6       	rcall	.+3176   	; 0x113a <__mulsf3>
     4d2:	2b 01       	movw	r4, r22
     4d4:	3c 01       	movw	r6, r24
     4d6:	28 81       	ld	r18, Y
     4d8:	39 81       	ldd	r19, Y+1	; 0x01
     4da:	4a 81       	ldd	r20, Y+2	; 0x02
     4dc:	5b 81       	ldd	r21, Y+3	; 0x03
     4de:	c5 01       	movw	r24, r10
     4e0:	b4 01       	movw	r22, r8
     4e2:	2b d6       	rcall	.+3158   	; 0x113a <__mulsf3>
     4e4:	a7 01       	movw	r20, r14
     4e6:	96 01       	movw	r18, r12
     4e8:	05 d5       	rcall	.+2570   	; 0xef4 <__addsf3>
     4ea:	9b 01       	movw	r18, r22
     4ec:	ac 01       	movw	r20, r24
     4ee:	c3 01       	movw	r24, r6
     4f0:	b2 01       	movw	r22, r4
     4f2:	00 d5       	rcall	.+2560   	; 0xef4 <__addsf3>
     4f4:	63 d5       	rcall	.+2758   	; 0xfbc <__fixsfsi>
     4f6:	7f 87       	std	Y+15, r23	; 0x0f
     4f8:	6e 87       	std	Y+14, r22	; 0x0e
     4fa:	1f 8b       	std	Y+23, r17	; 0x17
     4fc:	0e 8b       	std	Y+22, r16	; 0x16
     4fe:	28 8d       	ldd	r18, Y+24	; 0x18
     500:	39 8d       	ldd	r19, Y+25	; 0x19
     502:	62 0f       	add	r22, r18
     504:	73 1f       	adc	r23, r19
     506:	cb 01       	movw	r24, r22
     508:	77 23       	and	r23, r23
     50a:	24 f4       	brge	.+8      	; 0x514 <_Z12setTuningsM2a+0xce>
     50c:	88 27       	eor	r24, r24
     50e:	99 27       	eor	r25, r25
     510:	86 1b       	sub	r24, r22
     512:	97 0b       	sbc	r25, r23
     514:	8a 3f       	cpi	r24, 0xFA	; 250
     516:	91 05       	cpc	r25, r1
     518:	2c f4       	brge	.+10     	; 0x524 <_Z12setTuningsM2a+0xde>
     51a:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <mb+0x19>
     51e:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <mb+0x18>
     522:	10 c0       	rjmp	.+32     	; 0x544 <_Z12setTuningsM2a+0xfe>
     524:	16 16       	cp	r1, r22
     526:	17 06       	cpc	r1, r23
     528:	3c f4       	brge	.+14     	; 0x538 <_Z12setTuningsM2a+0xf2>
     52a:	89 ef       	ldi	r24, 0xF9	; 249
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <mb+0x19>
     532:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <mb+0x18>
     536:	06 c0       	rjmp	.+12     	; 0x544 <_Z12setTuningsM2a+0xfe>
     538:	87 e0       	ldi	r24, 0x07	; 7
     53a:	9f ef       	ldi	r25, 0xFF	; 255
     53c:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <mb+0x19>
     540:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <mb+0x18>
     544:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <mb+0x18>
     548:	70 91 73 02 	lds	r23, 0x0273	; 0x800273 <mb+0x19>
     54c:	84 e2       	ldi	r24, 0x24	; 36
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	ea d3       	rcall	.+2004   	; 0xd26 <_ZN5Motor11SetOcrValueEi>
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	7f 90       	pop	r7
     56c:	6f 90       	pop	r6
     56e:	5f 90       	pop	r5
     570:	4f 90       	pop	r4
     572:	08 95       	ret

00000574 <_Z12setTuningsM3a>:
     574:	4f 92       	push	r4
     576:	5f 92       	push	r5
     578:	6f 92       	push	r6
     57a:	7f 92       	push	r7
     57c:	8f 92       	push	r8
     57e:	9f 92       	push	r9
     580:	af 92       	push	r10
     582:	bf 92       	push	r11
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <e3+0x2>
     598:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <e3+0x3>
     59c:	c0 e4       	ldi	r28, 0x40	; 64
     59e:	d2 e0       	ldi	r29, 0x02	; 2
     5a0:	3d 87       	std	Y+13, r19	; 0x0d
     5a2:	2c 87       	std	Y+12, r18	; 0x0c
     5a4:	08 2f       	mov	r16, r24
     5a6:	88 0f       	add	r24, r24
     5a8:	11 0b       	sbc	r17, r17
     5aa:	02 1b       	sub	r16, r18
     5ac:	13 0b       	sbc	r17, r19
     5ae:	19 8b       	std	Y+17, r17	; 0x11
     5b0:	08 8b       	std	Y+16, r16	; 0x10
     5b2:	b8 01       	movw	r22, r16
     5b4:	01 2e       	mov	r0, r17
     5b6:	00 0c       	add	r0, r0
     5b8:	88 0b       	sbc	r24, r24
     5ba:	99 0b       	sbc	r25, r25
     5bc:	32 d5       	rcall	.+2660   	; 0x1022 <__floatsisf>
     5be:	4b 01       	movw	r8, r22
     5c0:	5c 01       	movw	r10, r24
     5c2:	2c 81       	ldd	r18, Y+4	; 0x04
     5c4:	3d 81       	ldd	r19, Y+5	; 0x05
     5c6:	4e 81       	ldd	r20, Y+6	; 0x06
     5c8:	5f 81       	ldd	r21, Y+7	; 0x07
     5ca:	b7 d5       	rcall	.+2926   	; 0x113a <__mulsf3>
     5cc:	2a 89       	ldd	r18, Y+18	; 0x12
     5ce:	3b 89       	ldd	r19, Y+19	; 0x13
     5d0:	4c 89       	ldd	r20, Y+20	; 0x14
     5d2:	5d 89       	ldd	r21, Y+21	; 0x15
     5d4:	8f d4       	rcall	.+2334   	; 0xef4 <__addsf3>
     5d6:	6b 01       	movw	r12, r22
     5d8:	7c 01       	movw	r14, r24
     5da:	6a 8b       	std	Y+18, r22	; 0x12
     5dc:	7b 8b       	std	Y+19, r23	; 0x13
     5de:	8c 8b       	std	Y+20, r24	; 0x14
     5e0:	9d 8b       	std	Y+21, r25	; 0x15
     5e2:	8e 89       	ldd	r24, Y+22	; 0x16
     5e4:	9f 89       	ldd	r25, Y+23	; 0x17
     5e6:	b8 01       	movw	r22, r16
     5e8:	68 1b       	sub	r22, r24
     5ea:	79 0b       	sbc	r23, r25
     5ec:	07 2e       	mov	r0, r23
     5ee:	00 0c       	add	r0, r0
     5f0:	88 0b       	sbc	r24, r24
     5f2:	99 0b       	sbc	r25, r25
     5f4:	16 d5       	rcall	.+2604   	; 0x1022 <__floatsisf>
     5f6:	28 85       	ldd	r18, Y+8	; 0x08
     5f8:	39 85       	ldd	r19, Y+9	; 0x09
     5fa:	4a 85       	ldd	r20, Y+10	; 0x0a
     5fc:	5b 85       	ldd	r21, Y+11	; 0x0b
     5fe:	9d d5       	rcall	.+2874   	; 0x113a <__mulsf3>
     600:	2b 01       	movw	r4, r22
     602:	3c 01       	movw	r6, r24
     604:	28 81       	ld	r18, Y
     606:	39 81       	ldd	r19, Y+1	; 0x01
     608:	4a 81       	ldd	r20, Y+2	; 0x02
     60a:	5b 81       	ldd	r21, Y+3	; 0x03
     60c:	c5 01       	movw	r24, r10
     60e:	b4 01       	movw	r22, r8
     610:	94 d5       	rcall	.+2856   	; 0x113a <__mulsf3>
     612:	a7 01       	movw	r20, r14
     614:	96 01       	movw	r18, r12
     616:	6e d4       	rcall	.+2268   	; 0xef4 <__addsf3>
     618:	9b 01       	movw	r18, r22
     61a:	ac 01       	movw	r20, r24
     61c:	c3 01       	movw	r24, r6
     61e:	b2 01       	movw	r22, r4
     620:	69 d4       	rcall	.+2258   	; 0xef4 <__addsf3>
     622:	cc d4       	rcall	.+2456   	; 0xfbc <__fixsfsi>
     624:	7f 87       	std	Y+15, r23	; 0x0f
     626:	6e 87       	std	Y+14, r22	; 0x0e
     628:	1f 8b       	std	Y+23, r17	; 0x17
     62a:	0e 8b       	std	Y+22, r16	; 0x16
     62c:	28 8d       	ldd	r18, Y+24	; 0x18
     62e:	39 8d       	ldd	r19, Y+25	; 0x19
     630:	62 0f       	add	r22, r18
     632:	73 1f       	adc	r23, r19
     634:	cb 01       	movw	r24, r22
     636:	77 23       	and	r23, r23
     638:	24 f4       	brge	.+8      	; 0x642 <_Z12setTuningsM3a+0xce>
     63a:	88 27       	eor	r24, r24
     63c:	99 27       	eor	r25, r25
     63e:	86 1b       	sub	r24, r22
     640:	97 0b       	sbc	r25, r23
     642:	8a 3f       	cpi	r24, 0xFA	; 250
     644:	91 05       	cpc	r25, r1
     646:	2c f4       	brge	.+10     	; 0x652 <_Z12setTuningsM3a+0xde>
     648:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <mc+0x19>
     64c:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <mc+0x18>
     650:	10 c0       	rjmp	.+32     	; 0x672 <_Z12setTuningsM3a+0xfe>
     652:	16 16       	cp	r1, r22
     654:	17 06       	cpc	r1, r23
     656:	3c f4       	brge	.+14     	; 0x666 <_Z12setTuningsM3a+0xf2>
     658:	89 ef       	ldi	r24, 0xF9	; 249
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <mc+0x19>
     660:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <mc+0x18>
     664:	06 c0       	rjmp	.+12     	; 0x672 <_Z12setTuningsM3a+0xfe>
     666:	87 e0       	ldi	r24, 0x07	; 7
     668:	9f ef       	ldi	r25, 0xFF	; 255
     66a:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <mc+0x19>
     66e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <mc+0x18>
     672:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <mc+0x18>
     676:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <mc+0x19>
     67a:	83 e2       	ldi	r24, 0x23	; 35
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	53 d3       	rcall	.+1702   	; 0xd26 <_ZN5Motor11SetOcrValueEi>
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	df 90       	pop	r13
     68e:	cf 90       	pop	r12
     690:	bf 90       	pop	r11
     692:	af 90       	pop	r10
     694:	9f 90       	pop	r9
     696:	8f 90       	pop	r8
     698:	7f 90       	pop	r7
     69a:	6f 90       	pop	r6
     69c:	5f 90       	pop	r5
     69e:	4f 90       	pop	r4
     6a0:	08 95       	ret

000006a2 <_Z12setTuningsM4a>:
     6a2:	4f 92       	push	r4
     6a4:	5f 92       	push	r5
     6a6:	6f 92       	push	r6
     6a8:	7f 92       	push	r7
     6aa:	8f 92       	push	r8
     6ac:	9f 92       	push	r9
     6ae:	af 92       	push	r10
     6b0:	bf 92       	push	r11
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__data_end+0x2>
     6c6:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__data_end+0x3>
     6ca:	c6 e2       	ldi	r28, 0x26	; 38
     6cc:	d2 e0       	ldi	r29, 0x02	; 2
     6ce:	3d 87       	std	Y+13, r19	; 0x0d
     6d0:	2c 87       	std	Y+12, r18	; 0x0c
     6d2:	08 2f       	mov	r16, r24
     6d4:	88 0f       	add	r24, r24
     6d6:	11 0b       	sbc	r17, r17
     6d8:	02 1b       	sub	r16, r18
     6da:	13 0b       	sbc	r17, r19
     6dc:	19 8b       	std	Y+17, r17	; 0x11
     6de:	08 8b       	std	Y+16, r16	; 0x10
     6e0:	b8 01       	movw	r22, r16
     6e2:	01 2e       	mov	r0, r17
     6e4:	00 0c       	add	r0, r0
     6e6:	88 0b       	sbc	r24, r24
     6e8:	99 0b       	sbc	r25, r25
     6ea:	9b d4       	rcall	.+2358   	; 0x1022 <__floatsisf>
     6ec:	4b 01       	movw	r8, r22
     6ee:	5c 01       	movw	r10, r24
     6f0:	2c 81       	ldd	r18, Y+4	; 0x04
     6f2:	3d 81       	ldd	r19, Y+5	; 0x05
     6f4:	4e 81       	ldd	r20, Y+6	; 0x06
     6f6:	5f 81       	ldd	r21, Y+7	; 0x07
     6f8:	20 d5       	rcall	.+2624   	; 0x113a <__mulsf3>
     6fa:	2a 89       	ldd	r18, Y+18	; 0x12
     6fc:	3b 89       	ldd	r19, Y+19	; 0x13
     6fe:	4c 89       	ldd	r20, Y+20	; 0x14
     700:	5d 89       	ldd	r21, Y+21	; 0x15
     702:	f8 d3       	rcall	.+2032   	; 0xef4 <__addsf3>
     704:	6b 01       	movw	r12, r22
     706:	7c 01       	movw	r14, r24
     708:	6a 8b       	std	Y+18, r22	; 0x12
     70a:	7b 8b       	std	Y+19, r23	; 0x13
     70c:	8c 8b       	std	Y+20, r24	; 0x14
     70e:	9d 8b       	std	Y+21, r25	; 0x15
     710:	8e 89       	ldd	r24, Y+22	; 0x16
     712:	9f 89       	ldd	r25, Y+23	; 0x17
     714:	b8 01       	movw	r22, r16
     716:	68 1b       	sub	r22, r24
     718:	79 0b       	sbc	r23, r25
     71a:	07 2e       	mov	r0, r23
     71c:	00 0c       	add	r0, r0
     71e:	88 0b       	sbc	r24, r24
     720:	99 0b       	sbc	r25, r25
     722:	7f d4       	rcall	.+2302   	; 0x1022 <__floatsisf>
     724:	28 85       	ldd	r18, Y+8	; 0x08
     726:	39 85       	ldd	r19, Y+9	; 0x09
     728:	4a 85       	ldd	r20, Y+10	; 0x0a
     72a:	5b 85       	ldd	r21, Y+11	; 0x0b
     72c:	06 d5       	rcall	.+2572   	; 0x113a <__mulsf3>
     72e:	2b 01       	movw	r4, r22
     730:	3c 01       	movw	r6, r24
     732:	28 81       	ld	r18, Y
     734:	39 81       	ldd	r19, Y+1	; 0x01
     736:	4a 81       	ldd	r20, Y+2	; 0x02
     738:	5b 81       	ldd	r21, Y+3	; 0x03
     73a:	c5 01       	movw	r24, r10
     73c:	b4 01       	movw	r22, r8
     73e:	fd d4       	rcall	.+2554   	; 0x113a <__mulsf3>
     740:	a7 01       	movw	r20, r14
     742:	96 01       	movw	r18, r12
     744:	d7 d3       	rcall	.+1966   	; 0xef4 <__addsf3>
     746:	9b 01       	movw	r18, r22
     748:	ac 01       	movw	r20, r24
     74a:	c3 01       	movw	r24, r6
     74c:	b2 01       	movw	r22, r4
     74e:	d2 d3       	rcall	.+1956   	; 0xef4 <__addsf3>
     750:	35 d4       	rcall	.+2154   	; 0xfbc <__fixsfsi>
     752:	7f 87       	std	Y+15, r23	; 0x0f
     754:	6e 87       	std	Y+14, r22	; 0x0e
     756:	1f 8b       	std	Y+23, r17	; 0x17
     758:	0e 8b       	std	Y+22, r16	; 0x16
     75a:	28 8d       	ldd	r18, Y+24	; 0x18
     75c:	39 8d       	ldd	r19, Y+25	; 0x19
     75e:	62 0f       	add	r22, r18
     760:	73 1f       	adc	r23, r19
     762:	cb 01       	movw	r24, r22
     764:	77 23       	and	r23, r23
     766:	24 f4       	brge	.+8      	; 0x770 <_Z12setTuningsM4a+0xce>
     768:	88 27       	eor	r24, r24
     76a:	99 27       	eor	r25, r25
     76c:	86 1b       	sub	r24, r22
     76e:	97 0b       	sbc	r25, r23
     770:	8a 3f       	cpi	r24, 0xFA	; 250
     772:	91 05       	cpc	r25, r1
     774:	2c f4       	brge	.+10     	; 0x780 <_Z12setTuningsM4a+0xde>
     776:	70 93 3f 02 	sts	0x023F, r23	; 0x80023f <md+0x19>
     77a:	60 93 3e 02 	sts	0x023E, r22	; 0x80023e <md+0x18>
     77e:	10 c0       	rjmp	.+32     	; 0x7a0 <_Z12setTuningsM4a+0xfe>
     780:	16 16       	cp	r1, r22
     782:	17 06       	cpc	r1, r23
     784:	3c f4       	brge	.+14     	; 0x794 <_Z12setTuningsM4a+0xf2>
     786:	89 ef       	ldi	r24, 0xF9	; 249
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <md+0x19>
     78e:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <md+0x18>
     792:	06 c0       	rjmp	.+12     	; 0x7a0 <_Z12setTuningsM4a+0xfe>
     794:	87 e0       	ldi	r24, 0x07	; 7
     796:	9f ef       	ldi	r25, 0xFF	; 255
     798:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <md+0x19>
     79c:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <md+0x18>
     7a0:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <md+0x18>
     7a4:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <md+0x19>
     7a8:	82 e2       	ldi	r24, 0x22	; 34
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	bc d2       	rcall	.+1400   	; 0xd26 <_ZN5Motor11SetOcrValueEi>
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
     7b8:	ef 90       	pop	r14
     7ba:	df 90       	pop	r13
     7bc:	cf 90       	pop	r12
     7be:	bf 90       	pop	r11
     7c0:	af 90       	pop	r10
     7c2:	9f 90       	pop	r9
     7c4:	8f 90       	pop	r8
     7c6:	7f 90       	pop	r7
     7c8:	6f 90       	pop	r6
     7ca:	5f 90       	pop	r5
     7cc:	4f 90       	pop	r4
     7ce:	08 95       	ret

000007d0 <_Z10computePidv>:
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <MotorPidFlag>
     7d8:	88 23       	and	r24, r24
     7da:	91 f0       	breq	.+36     	; 0x800 <_Z10computePidv+0x30>
     7dc:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <PidUpdateFlagMotor>
     7e0:	88 23       	and	r24, r24
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <_Z10computePidv+0x16>
     7e4:	4f c0       	rjmp	.+158    	; 0x884 <_Z10computePidv+0xb4>
     7e6:	c3 e9       	ldi	r28, 0x93	; 147
     7e8:	d2 e0       	ldi	r29, 0x02	; 2
     7ea:	88 81       	ld	r24, Y
     7ec:	95 dd       	rcall	.-1238   	; 0x318 <_Z12setTuningsM1a>
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	2a de       	rcall	.-940    	; 0x446 <_Z12setTuningsM2a>
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	bf de       	rcall	.-642    	; 0x574 <_Z12setTuningsM3a>
     7f6:	8b 81       	ldd	r24, Y+3	; 0x03
     7f8:	54 df       	rcall	.-344    	; 0x6a2 <_Z12setTuningsM4a>
     7fa:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <PidUpdateFlagMotor>
     7fe:	42 c0       	rjmp	.+132    	; 0x884 <_Z10computePidv+0xb4>
     800:	c3 e9       	ldi	r28, 0x93	; 147
     802:	d2 e0       	ldi	r29, 0x02	; 2
     804:	68 81       	ld	r22, Y
     806:	06 2e       	mov	r0, r22
     808:	00 0c       	add	r0, r0
     80a:	77 0b       	sbc	r23, r23
     80c:	88 0b       	sbc	r24, r24
     80e:	99 0b       	sbc	r25, r25
     810:	08 d4       	rcall	.+2064   	; 0x1022 <__floatsisf>
     812:	2d ec       	ldi	r18, 0xCD	; 205
     814:	3c ec       	ldi	r19, 0xCC	; 204
     816:	4c ea       	ldi	r20, 0xAC	; 172
     818:	50 e4       	ldi	r21, 0x40	; 64
     81a:	8f d4       	rcall	.+2334   	; 0x113a <__mulsf3>
     81c:	cf d3       	rcall	.+1950   	; 0xfbc <__fixsfsi>
     81e:	85 e2       	ldi	r24, 0x25	; 37
     820:	92 e0       	ldi	r25, 0x02	; 2
     822:	81 d2       	rcall	.+1282   	; 0xd26 <_ZN5Motor11SetOcrValueEi>
     824:	69 81       	ldd	r22, Y+1	; 0x01
     826:	06 2e       	mov	r0, r22
     828:	00 0c       	add	r0, r0
     82a:	77 0b       	sbc	r23, r23
     82c:	88 0b       	sbc	r24, r24
     82e:	99 0b       	sbc	r25, r25
     830:	f8 d3       	rcall	.+2032   	; 0x1022 <__floatsisf>
     832:	2d ec       	ldi	r18, 0xCD	; 205
     834:	3c ec       	ldi	r19, 0xCC	; 204
     836:	4c ea       	ldi	r20, 0xAC	; 172
     838:	50 e4       	ldi	r21, 0x40	; 64
     83a:	7f d4       	rcall	.+2302   	; 0x113a <__mulsf3>
     83c:	bf d3       	rcall	.+1918   	; 0xfbc <__fixsfsi>
     83e:	84 e2       	ldi	r24, 0x24	; 36
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	71 d2       	rcall	.+1250   	; 0xd26 <_ZN5Motor11SetOcrValueEi>
     844:	6a 81       	ldd	r22, Y+2	; 0x02
     846:	06 2e       	mov	r0, r22
     848:	00 0c       	add	r0, r0
     84a:	77 0b       	sbc	r23, r23
     84c:	88 0b       	sbc	r24, r24
     84e:	99 0b       	sbc	r25, r25
     850:	e8 d3       	rcall	.+2000   	; 0x1022 <__floatsisf>
     852:	2d ec       	ldi	r18, 0xCD	; 205
     854:	3c ec       	ldi	r19, 0xCC	; 204
     856:	4c ea       	ldi	r20, 0xAC	; 172
     858:	50 e4       	ldi	r21, 0x40	; 64
     85a:	6f d4       	rcall	.+2270   	; 0x113a <__mulsf3>
     85c:	af d3       	rcall	.+1886   	; 0xfbc <__fixsfsi>
     85e:	83 e2       	ldi	r24, 0x23	; 35
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	61 d2       	rcall	.+1218   	; 0xd26 <_ZN5Motor11SetOcrValueEi>
     864:	6b 81       	ldd	r22, Y+3	; 0x03
     866:	06 2e       	mov	r0, r22
     868:	00 0c       	add	r0, r0
     86a:	77 0b       	sbc	r23, r23
     86c:	88 0b       	sbc	r24, r24
     86e:	99 0b       	sbc	r25, r25
     870:	d8 d3       	rcall	.+1968   	; 0x1022 <__floatsisf>
     872:	2d ec       	ldi	r18, 0xCD	; 205
     874:	3c ec       	ldi	r19, 0xCC	; 204
     876:	4c ea       	ldi	r20, 0xAC	; 172
     878:	50 e4       	ldi	r21, 0x40	; 64
     87a:	5f d4       	rcall	.+2238   	; 0x113a <__mulsf3>
     87c:	9f d3       	rcall	.+1854   	; 0xfbc <__fixsfsi>
     87e:	82 e2       	ldi	r24, 0x22	; 34
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	51 d2       	rcall	.+1186   	; 0xd26 <_ZN5Motor11SetOcrValueEi>
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <_Z9stopDrivev>:
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	85 e2       	ldi	r24, 0x25	; 37
     890:	92 e0       	ldi	r25, 0x02	; 2
     892:	08 d2       	rcall	.+1040   	; 0xca4 <_ZN5Motor9StopMotorEv>
     894:	84 e2       	ldi	r24, 0x24	; 36
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	05 d2       	rcall	.+1034   	; 0xca4 <_ZN5Motor9StopMotorEv>
     89a:	83 e2       	ldi	r24, 0x23	; 35
     89c:	92 e0       	ldi	r25, 0x02	; 2
     89e:	02 d2       	rcall	.+1028   	; 0xca4 <_ZN5Motor9StopMotorEv>
     8a0:	82 e2       	ldi	r24, 0x22	; 34
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	ff d1       	rcall	.+1022   	; 0xca4 <_ZN5Motor9StopMotorEv>
     8a6:	86 e2       	ldi	r24, 0x26	; 38
     8a8:	92 e0       	ldi	r25, 0x02	; 2
     8aa:	fc 01       	movw	r30, r24
     8ac:	17 8a       	std	Z+23, r1	; 0x17
     8ae:	16 8a       	std	Z+22, r1	; 0x16
     8b0:	c0 e4       	ldi	r28, 0x40	; 64
     8b2:	d2 e0       	ldi	r29, 0x02	; 2
     8b4:	1f 8a       	std	Y+23, r1	; 0x17
     8b6:	1e 8a       	std	Y+22, r1	; 0x16
     8b8:	aa e5       	ldi	r26, 0x5A	; 90
     8ba:	b2 e0       	ldi	r27, 0x02	; 2
     8bc:	57 96       	adiw	r26, 0x17	; 23
     8be:	1c 92       	st	X, r1
     8c0:	1e 92       	st	-X, r1
     8c2:	56 97       	sbiw	r26, 0x16	; 22
     8c4:	24 e7       	ldi	r18, 0x74	; 116
     8c6:	32 e0       	ldi	r19, 0x02	; 2
     8c8:	f9 01       	movw	r30, r18
     8ca:	17 8a       	std	Z+23, r1	; 0x17
     8cc:	16 8a       	std	Z+22, r1	; 0x16
     8ce:	fc 01       	movw	r30, r24
     8d0:	12 8a       	std	Z+18, r1	; 0x12
     8d2:	13 8a       	std	Z+19, r1	; 0x13
     8d4:	14 8a       	std	Z+20, r1	; 0x14
     8d6:	15 8a       	std	Z+21, r1	; 0x15
     8d8:	1a 8a       	std	Y+18, r1	; 0x12
     8da:	1b 8a       	std	Y+19, r1	; 0x13
     8dc:	1c 8a       	std	Y+20, r1	; 0x14
     8de:	1d 8a       	std	Y+21, r1	; 0x15
     8e0:	52 96       	adiw	r26, 0x12	; 18
     8e2:	1d 92       	st	X+, r1
     8e4:	1d 92       	st	X+, r1
     8e6:	1d 92       	st	X+, r1
     8e8:	1c 92       	st	X, r1
     8ea:	55 97       	sbiw	r26, 0x15	; 21
     8ec:	f9 01       	movw	r30, r18
     8ee:	12 8a       	std	Z+18, r1	; 0x12
     8f0:	13 8a       	std	Z+19, r1	; 0x13
     8f2:	14 8a       	std	Z+20, r1	; 0x14
     8f4:	15 8a       	std	Z+21, r1	; 0x15
     8f6:	fc 01       	movw	r30, r24
     8f8:	17 86       	std	Z+15, r1	; 0x0f
     8fa:	16 86       	std	Z+14, r1	; 0x0e
     8fc:	1f 86       	std	Y+15, r1	; 0x0f
     8fe:	1e 86       	std	Y+14, r1	; 0x0e
     900:	1f 96       	adiw	r26, 0x0f	; 15
     902:	1c 92       	st	X, r1
     904:	1e 92       	st	-X, r1
     906:	1e 97       	sbiw	r26, 0x0e	; 14
     908:	f9 01       	movw	r30, r18
     90a:	17 86       	std	Z+15, r1	; 0x0f
     90c:	16 86       	std	Z+14, r1	; 0x0e
     90e:	fc 01       	movw	r30, r24
     910:	11 8e       	std	Z+25, r1	; 0x19
     912:	10 8e       	std	Z+24, r1	; 0x18
     914:	19 8e       	std	Y+25, r1	; 0x19
     916:	18 8e       	std	Y+24, r1	; 0x18
     918:	59 96       	adiw	r26, 0x19	; 25
     91a:	1c 92       	st	X, r1
     91c:	1e 92       	st	-X, r1
     91e:	58 97       	sbiw	r26, 0x18	; 24
     920:	f9 01       	movw	r30, r18
     922:	11 8e       	std	Z+25, r1	; 0x19
     924:	10 8e       	std	Z+24, r1	; 0x18
     926:	e3 e9       	ldi	r30, 0x93	; 147
     928:	f2 e0       	ldi	r31, 0x02	; 2
     92a:	10 82       	st	Z, r1
     92c:	11 82       	std	Z+1, r1	; 0x01
     92e:	12 82       	std	Z+2, r1	; 0x02
     930:	13 82       	std	Z+3, r1	; 0x03
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <main>:

int main(void)
{
 	PCICR |= (1<<PCIE0);
     938:	e8 e6       	ldi	r30, 0x68	; 104
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	81 60       	ori	r24, 0x01	; 1
     940:	80 83       	st	Z, r24
 	PCMSK0 |= (1<<PCINT4);
     942:	eb e6       	ldi	r30, 0x6B	; 107
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	80 61       	ori	r24, 0x10	; 16
     94a:	80 83       	st	Z, r24
	
	//initUART0();
	initUART2();
     94c:	46 d2       	rcall	.+1164   	; 0xdda <_Z9initUART2v>
	//initUART3();

	sei();
     94e:	78 94       	sei
	inline float getkp(void){return kp;}
	inline float getkd(void){return kd;}
	inline float getki(void){return ki;}
	void setpid(double KP, double KI, double KD)
	{
		kp = KP;
     950:	e4 e7       	ldi	r30, 0x74	; 116
     952:	f2 e0       	ldi	r31, 0x02	; 2
     954:	00 e0       	ldi	r16, 0x00	; 0
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	20 ea       	ldi	r18, 0xA0	; 160
     95a:	3f e3       	ldi	r19, 0x3F	; 63
     95c:	00 83       	st	Z, r16
     95e:	11 83       	std	Z+1, r17	; 0x01
     960:	22 83       	std	Z+2, r18	; 0x02
     962:	33 83       	std	Z+3, r19	; 0x03
		ki = KI;
     964:	4f e6       	ldi	r20, 0x6F	; 111
     966:	52 e1       	ldi	r21, 0x12	; 18
     968:	63 e8       	ldi	r22, 0x83	; 131
     96a:	7b e3       	ldi	r23, 0x3B	; 59
     96c:	44 83       	std	Z+4, r20	; 0x04
     96e:	55 83       	std	Z+5, r21	; 0x05
     970:	66 83       	std	Z+6, r22	; 0x06
     972:	77 83       	std	Z+7, r23	; 0x07
		kd = KD;
     974:	0f 2e       	mov	r0, r31
     976:	c1 2c       	mov	r12, r1
     978:	d1 2c       	mov	r13, r1
     97a:	f0 ed       	ldi	r31, 0xD0	; 208
     97c:	ef 2e       	mov	r14, r31
     97e:	f0 e4       	ldi	r31, 0x40	; 64
     980:	ff 2e       	mov	r15, r31
     982:	f0 2d       	mov	r31, r0
     984:	c0 86       	std	Z+8, r12	; 0x08
     986:	d1 86       	std	Z+9, r13	; 0x09
     988:	e2 86       	std	Z+10, r14	; 0x0a
     98a:	f3 86       	std	Z+11, r15	; 0x0b
	inline float getkp(void){return kp;}
	inline float getkd(void){return kd;}
	inline float getki(void){return ki;}
	void setpid(double KP, double KI, double KD)
	{
		kp = KP;
     98c:	ea e5       	ldi	r30, 0x5A	; 90
     98e:	f2 e0       	ldi	r31, 0x02	; 2
     990:	86 e6       	ldi	r24, 0x66	; 102
     992:	96 e6       	ldi	r25, 0x66	; 102
     994:	a6 ea       	ldi	r26, 0xA6	; 166
     996:	bf e3       	ldi	r27, 0x3F	; 63
     998:	80 83       	st	Z, r24
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	a2 83       	std	Z+2, r26	; 0x02
     99e:	b3 83       	std	Z+3, r27	; 0x03
		ki = KI;
     9a0:	86 ea       	ldi	r24, 0xA6	; 166
     9a2:	9b e9       	ldi	r25, 0x9B	; 155
     9a4:	a4 e4       	ldi	r26, 0x44	; 68
     9a6:	bb e3       	ldi	r27, 0x3B	; 59
     9a8:	84 83       	std	Z+4, r24	; 0x04
     9aa:	95 83       	std	Z+5, r25	; 0x05
     9ac:	a6 83       	std	Z+6, r26	; 0x06
     9ae:	b7 83       	std	Z+7, r27	; 0x07
		kd = KD;
     9b0:	c0 86       	std	Z+8, r12	; 0x08
     9b2:	d1 86       	std	Z+9, r13	; 0x09
     9b4:	e2 86       	std	Z+10, r14	; 0x0a
     9b6:	f3 86       	std	Z+11, r15	; 0x0b
	inline float getkp(void){return kp;}
	inline float getkd(void){return kd;}
	inline float getki(void){return ki;}
	void setpid(double KP, double KI, double KD)
	{
		kp = KP;
     9b8:	e0 e4       	ldi	r30, 0x40	; 64
     9ba:	f2 e0       	ldi	r31, 0x02	; 2
     9bc:	00 83       	st	Z, r16
     9be:	11 83       	std	Z+1, r17	; 0x01
     9c0:	22 83       	std	Z+2, r18	; 0x02
     9c2:	33 83       	std	Z+3, r19	; 0x03
		ki = KI;
     9c4:	44 83       	std	Z+4, r20	; 0x04
     9c6:	55 83       	std	Z+5, r21	; 0x05
     9c8:	66 83       	std	Z+6, r22	; 0x06
     9ca:	77 83       	std	Z+7, r23	; 0x07
		kd = KD;
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	60 ec       	ldi	r22, 0xC0	; 192
     9d2:	70 e4       	ldi	r23, 0x40	; 64
     9d4:	40 87       	std	Z+8, r20	; 0x08
     9d6:	51 87       	std	Z+9, r21	; 0x09
     9d8:	62 87       	std	Z+10, r22	; 0x0a
     9da:	73 87       	std	Z+11, r23	; 0x0b
	inline float getkp(void){return kp;}
	inline float getkd(void){return kd;}
	inline float getki(void){return ki;}
	void setpid(double KP, double KI, double KD)
	{
		kp = KP;
     9dc:	e6 e2       	ldi	r30, 0x26	; 38
     9de:	f2 e0       	ldi	r31, 0x02	; 2
     9e0:	4d ec       	ldi	r20, 0xCD	; 205
     9e2:	5c ec       	ldi	r21, 0xCC	; 204
     9e4:	6c e8       	ldi	r22, 0x8C	; 140
     9e6:	7f e3       	ldi	r23, 0x3F	; 63
     9e8:	40 83       	st	Z, r20
     9ea:	51 83       	std	Z+1, r21	; 0x01
     9ec:	62 83       	std	Z+2, r22	; 0x02
     9ee:	73 83       	std	Z+3, r23	; 0x03
		ki = KI;
     9f0:	84 83       	std	Z+4, r24	; 0x04
     9f2:	95 83       	std	Z+5, r25	; 0x05
     9f4:	a6 83       	std	Z+6, r26	; 0x06
     9f6:	b7 83       	std	Z+7, r27	; 0x07
		kd = KD;
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 eb       	ldi	r26, 0xB0	; 176
     9fe:	b0 e4       	ldi	r27, 0x40	; 64
     a00:	80 87       	std	Z+8, r24	; 0x08
     a02:	91 87       	std	Z+9, r25	; 0x09
     a04:	a2 87       	std	Z+10, r26	; 0x0a
 		//UART0TransmitString("\t");
 		//UART0TransmitData(rcvdata[3]);
 		//UART0TransmitString("  ");
 		//UART0TransmitData(e4.getspeed());
 		//UART0TransmitString("\r\n");
		computePid();
     a06:	b3 87       	std	Z+11, r27	; 0x0b
     a08:	e3 de       	rcall	.-570    	; 0x7d0 <_Z10computePidv>
     a0a:	fe cf       	rjmp	.-4      	; 0xa08 <main+0xd0>

00000a0c <__vector_9>:
	}
}
 ISR(PCINT0_vect)
 {
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	0b b6       	in	r0, 0x3b	; 59
     a18:	0f 92       	push	r0
     a1a:	2f 93       	push	r18
     a1c:	3f 93       	push	r19
     a1e:	4f 93       	push	r20
     a20:	5f 93       	push	r21
     a22:	6f 93       	push	r22
     a24:	7f 93       	push	r23
     a26:	8f 93       	push	r24
     a28:	9f 93       	push	r25
     a2a:	af 93       	push	r26
     a2c:	bf 93       	push	r27
     a2e:	ef 93       	push	r30
     a30:	ff 93       	push	r31
	stopDrive();
     a32:	2b df       	rcall	.-426    	; 0x88a <_Z9stopDrivev>
}
     a34:	ff 91       	pop	r31
     a36:	ef 91       	pop	r30
     a38:	bf 91       	pop	r27
     a3a:	af 91       	pop	r26
     a3c:	9f 91       	pop	r25
     a3e:	8f 91       	pop	r24
     a40:	7f 91       	pop	r23
     a42:	6f 91       	pop	r22
     a44:	5f 91       	pop	r21
     a46:	4f 91       	pop	r20
     a48:	3f 91       	pop	r19
     a4a:	2f 91       	pop	r18
     a4c:	0f 90       	pop	r0
     a4e:	0b be       	out	0x3b, r0	; 59
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <_GLOBAL__sub_I_MotorPidFlag>:
     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
			num = no;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <m1>
			InitPWM();
     a60:	85 e2       	ldi	r24, 0x25	; 37
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	3b d0       	rcall	.+118    	; 0xadc <_ZN5Motor7InitPWMEv>
     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
			num = no;
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <m2>
			InitPWM();
     a6c:	84 e2       	ldi	r24, 0x24	; 36
     a6e:	92 e0       	ldi	r25, 0x02	; 2
     a70:	35 d0       	rcall	.+106    	; 0xadc <_ZN5Motor7InitPWMEv>
     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
			num = no;
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <m3>
			InitPWM();
     a78:	83 e2       	ldi	r24, 0x23	; 35
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	2f d0       	rcall	.+94     	; 0xadc <_ZN5Motor7InitPWMEv>
     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
			num = no;
     a7e:	84 e0       	ldi	r24, 0x04	; 4
     a80:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <m4>
			InitPWM();
     a84:	82 e2       	ldi	r24, 0x22	; 34
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	29 d0       	rcall	.+82     	; 0xadc <_ZN5Motor7InitPWMEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
     a8a:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <e1+0x1>
     a8e:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <e1>
			Init_encoder_interrupt();
     a92:	8a e1       	ldi	r24, 0x1A	; 26
     a94:	92 e0       	ldi	r25, 0x02	; 2
			Init_timer();
     a96:	58 db       	rcall	.-2384   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
     a98:	8a e1       	ldi	r24, 0x1A	; 26
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	60 db       	rcall	.-2368   	; 0x15e <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
     a9e:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <e2+0x1>
     aa2:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <e2>
			Init_encoder_interrupt();
     aa6:	82 e1       	ldi	r24, 0x12	; 18
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	4e db       	rcall	.-2404   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     aac:	82 e1       	ldi	r24, 0x12	; 18
     aae:	92 e0       	ldi	r25, 0x02	; 2
     ab0:	56 db       	rcall	.-2388   	; 0x15e <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
     ab2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <e3+0x1>
     ab6:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <e3>
			Init_encoder_interrupt();
     aba:	8a e0       	ldi	r24, 0x0A	; 10
     abc:	92 e0       	ldi	r25, 0x02	; 2
     abe:	44 db       	rcall	.-2424   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     ac0:	8a e0       	ldi	r24, 0x0A	; 10
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	4c db       	rcall	.-2408   	; 0x15e <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
     ac6:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
     aca:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
			Init_encoder_interrupt();
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	3a db       	rcall	.-2444   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
     ad4:	82 e0       	ldi	r24, 0x02	; 2
			Init_timer();
     ad6:	92 e0       	ldi	r25, 0x02	; 2
     ad8:	42 cb       	rjmp	.-2428   	; 0x15e <_ZN7encoder10Init_timerEv>
     ada:	08 95       	ret

00000adc <_ZN5Motor7InitPWMEv>:
     adc:	fc 01       	movw	r30, r24
     ade:	80 81       	ld	r24, Z



void Motor::InitPWM()
{
	if (num==1)
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	f1 f4       	brne	.+60     	; 0xb20 <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
     ae4:	e7 e0       	ldi	r30, 0x07	; 7
     ae6:	f1 e0       	ldi	r31, 0x01	; 1
     ae8:	80 81       	ld	r24, Z
     aea:	80 64       	ori	r24, 0x40	; 64
     aec:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
     aee:	80 81       	ld	r24, Z
     af0:	80 68       	ori	r24, 0x80	; 128
     af2:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
     af4:	ea e0       	ldi	r30, 0x0A	; 10
     af6:	f1 e0       	ldi	r31, 0x01	; 1
     af8:	80 81       	ld	r24, Z
     afa:	80 62       	ori	r24, 0x20	; 32
     afc:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
     afe:	e0 e2       	ldi	r30, 0x20	; 32
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	80 81       	ld	r24, Z
     b04:	8a 60       	ori	r24, 0x0A	; 10
     b06:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
     b08:	e1 e2       	ldi	r30, 0x21	; 33
     b0a:	f1 e0       	ldi	r31, 0x01	; 1
     b0c:	80 81       	ld	r24, Z
     b0e:	8a 61       	ori	r24, 0x1A	; 26
     b10:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
     b12:	89 ef       	ldi	r24, 0xF9	; 249
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     b1a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     b1e:	08 95       	ret
	}
	else if(num==2)
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	f1 f4       	brne	.+60     	; 0xb60 <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
     b24:	e7 e0       	ldi	r30, 0x07	; 7
     b26:	f1 e0       	ldi	r31, 0x01	; 1
     b28:	80 81       	ld	r24, Z
     b2a:	88 60       	ori	r24, 0x08	; 8
     b2c:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
     b2e:	80 81       	ld	r24, Z
     b30:	84 60       	ori	r24, 0x04	; 4
     b32:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
     b34:	ea e0       	ldi	r30, 0x0A	; 10
     b36:	f1 e0       	ldi	r31, 0x01	; 1
     b38:	80 81       	ld	r24, Z
     b3a:	88 60       	ori	r24, 0x08	; 8
     b3c:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
     b3e:	e0 e2       	ldi	r30, 0x20	; 32
     b40:	f1 e0       	ldi	r31, 0x01	; 1
     b42:	80 81       	ld	r24, Z
     b44:	82 68       	ori	r24, 0x82	; 130
     b46:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
     b48:	e1 e2       	ldi	r30, 0x21	; 33
     b4a:	f1 e0       	ldi	r31, 0x01	; 1
     b4c:	80 81       	ld	r24, Z
     b4e:	8a 61       	ori	r24, 0x1A	; 26
     b50:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
     b52:	89 ef       	ldi	r24, 0xF9	; 249
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     b5a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     b5e:	08 95       	ret
	}
	else if(num==3)
     b60:	83 30       	cpi	r24, 0x03	; 3
     b62:	f1 f4       	brne	.+60     	; 0xba0 <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
     b64:	e7 e0       	ldi	r30, 0x07	; 7
     b66:	f1 e0       	ldi	r31, 0x01	; 1
     b68:	80 81       	ld	r24, Z
     b6a:	80 61       	ori	r24, 0x10	; 16
     b6c:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
     b6e:	80 81       	ld	r24, Z
     b70:	80 62       	ori	r24, 0x20	; 32
     b72:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
     b74:	ea e0       	ldi	r30, 0x0A	; 10
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	80 81       	ld	r24, Z
     b7a:	80 61       	ori	r24, 0x10	; 16
     b7c:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
     b7e:	e0 e2       	ldi	r30, 0x20	; 32
     b80:	f1 e0       	ldi	r31, 0x01	; 1
     b82:	80 81       	ld	r24, Z
     b84:	82 62       	ori	r24, 0x22	; 34
     b86:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
     b88:	e1 e2       	ldi	r30, 0x21	; 33
     b8a:	f1 e0       	ldi	r31, 0x01	; 1
     b8c:	80 81       	ld	r24, Z
     b8e:	8a 61       	ori	r24, 0x1A	; 26
     b90:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
     b92:	89 ef       	ldi	r24, 0xF9	; 249
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     b9a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     b9e:	08 95       	ret
	} 
	else if(num==4)
     ba0:	84 30       	cpi	r24, 0x04	; 4
     ba2:	e9 f4       	brne	.+58     	; 0xbde <_ZN5Motor7InitPWMEv+0x102>
	{
		OUTPUT(DD_F4);
     ba4:	e7 e0       	ldi	r30, 0x07	; 7
     ba6:	f1 e0       	ldi	r31, 0x01	; 1
     ba8:	80 81       	ld	r24, Z
     baa:	82 60       	ori	r24, 0x02	; 2
     bac:	80 83       	st	Z, r24
		OUTPUT(DD_B4);
     bae:	80 81       	ld	r24, Z
     bb0:	81 60       	ori	r24, 0x01	; 1
     bb2:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
     bb4:	e1 e0       	ldi	r30, 0x01	; 1
     bb6:	f1 e0       	ldi	r31, 0x01	; 1
     bb8:	80 81       	ld	r24, Z
     bba:	88 60       	ori	r24, 0x08	; 8
     bbc:	80 83       	st	Z, r24

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
     bbe:	e0 ea       	ldi	r30, 0xA0	; 160
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	82 68       	ori	r24, 0x82	; 130
     bc6:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
     bc8:	e1 ea       	ldi	r30, 0xA1	; 161
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	8a 61       	ori	r24, 0x1A	; 26
     bd0:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
     bd2:	89 ef       	ldi	r24, 0xF9	; 249
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     bda:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     bde:	08 95       	ret

00000be0 <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
     be0:	fc 01       	movw	r30, r24
     be2:	80 81       	ld	r24, Z
     be4:	82 30       	cpi	r24, 0x02	; 2
     be6:	91 f0       	breq	.+36     	; 0xc0c <_ZN5Motor19SetForwardDirectionEv+0x2c>
     be8:	18 f4       	brcc	.+6      	; 0xbf0 <_ZN5Motor19SetForwardDirectionEv+0x10>
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	31 f0       	breq	.+12     	; 0xbfa <_ZN5Motor19SetForwardDirectionEv+0x1a>
     bee:	08 95       	ret
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	a9 f0       	breq	.+42     	; 0xc1e <_ZN5Motor19SetForwardDirectionEv+0x3e>
     bf4:	84 30       	cpi	r24, 0x04	; 4
     bf6:	e1 f0       	breq	.+56     	; 0xc30 <_ZN5Motor19SetForwardDirectionEv+0x50>
     bf8:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
     bfa:	e8 e0       	ldi	r30, 0x08	; 8
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	80 81       	ld	r24, Z
     c00:	80 64       	ori	r24, 0x40	; 64
     c02:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     c04:	80 81       	ld	r24, Z
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	80 83       	st	Z, r24
			break;
     c0a:	08 95       	ret
		case 2:
			SET		(DD_F2);
     c0c:	e8 e0       	ldi	r30, 0x08	; 8
     c0e:	f1 e0       	ldi	r31, 0x01	; 1
     c10:	80 81       	ld	r24, Z
     c12:	88 60       	ori	r24, 0x08	; 8
     c14:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     c16:	80 81       	ld	r24, Z
     c18:	8b 7f       	andi	r24, 0xFB	; 251
     c1a:	80 83       	st	Z, r24
			break;
     c1c:	08 95       	ret
		case 3:
			SET		(DD_F3);
     c1e:	e8 e0       	ldi	r30, 0x08	; 8
     c20:	f1 e0       	ldi	r31, 0x01	; 1
     c22:	80 81       	ld	r24, Z
     c24:	80 61       	ori	r24, 0x10	; 16
     c26:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     c28:	80 81       	ld	r24, Z
     c2a:	8f 7d       	andi	r24, 0xDF	; 223
     c2c:	80 83       	st	Z, r24
			break;
     c2e:	08 95       	ret
		case 4:
			SET		(DD_F4);
     c30:	e8 e0       	ldi	r30, 0x08	; 8
     c32:	f1 e0       	ldi	r31, 0x01	; 1
     c34:	80 81       	ld	r24, Z
     c36:	82 60       	ori	r24, 0x02	; 2
     c38:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     c3a:	80 81       	ld	r24, Z
     c3c:	8e 7f       	andi	r24, 0xFE	; 254
     c3e:	80 83       	st	Z, r24
     c40:	08 95       	ret

00000c42 <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
     c42:	fc 01       	movw	r30, r24
     c44:	80 81       	ld	r24, Z
     c46:	82 30       	cpi	r24, 0x02	; 2
     c48:	91 f0       	breq	.+36     	; 0xc6e <_ZN5Motor19SetReverseDirectionEv+0x2c>
     c4a:	18 f4       	brcc	.+6      	; 0xc52 <_ZN5Motor19SetReverseDirectionEv+0x10>
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	31 f0       	breq	.+12     	; 0xc5c <_ZN5Motor19SetReverseDirectionEv+0x1a>
     c50:	08 95       	ret
     c52:	83 30       	cpi	r24, 0x03	; 3
     c54:	a9 f0       	breq	.+42     	; 0xc80 <_ZN5Motor19SetReverseDirectionEv+0x3e>
     c56:	84 30       	cpi	r24, 0x04	; 4
     c58:	e1 f0       	breq	.+56     	; 0xc92 <_ZN5Motor19SetReverseDirectionEv+0x50>
     c5a:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     c5c:	e8 e0       	ldi	r30, 0x08	; 8
     c5e:	f1 e0       	ldi	r31, 0x01	; 1
     c60:	80 81       	ld	r24, Z
     c62:	8f 7b       	andi	r24, 0xBF	; 191
     c64:	80 83       	st	Z, r24
			SET		(DD_B1);
     c66:	80 81       	ld	r24, Z
     c68:	80 68       	ori	r24, 0x80	; 128
     c6a:	80 83       	st	Z, r24
			break;
     c6c:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     c6e:	e8 e0       	ldi	r30, 0x08	; 8
     c70:	f1 e0       	ldi	r31, 0x01	; 1
     c72:	80 81       	ld	r24, Z
     c74:	87 7f       	andi	r24, 0xF7	; 247
     c76:	80 83       	st	Z, r24
			SET		(DD_B2);
     c78:	80 81       	ld	r24, Z
     c7a:	84 60       	ori	r24, 0x04	; 4
     c7c:	80 83       	st	Z, r24
			break;
     c7e:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     c80:	e8 e0       	ldi	r30, 0x08	; 8
     c82:	f1 e0       	ldi	r31, 0x01	; 1
     c84:	80 81       	ld	r24, Z
     c86:	8f 7e       	andi	r24, 0xEF	; 239
     c88:	80 83       	st	Z, r24
			SET		(DD_B3);
     c8a:	80 81       	ld	r24, Z
     c8c:	80 62       	ori	r24, 0x20	; 32
     c8e:	80 83       	st	Z, r24
			break;
     c90:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     c92:	e8 e0       	ldi	r30, 0x08	; 8
     c94:	f1 e0       	ldi	r31, 0x01	; 1
     c96:	80 81       	ld	r24, Z
     c98:	8d 7f       	andi	r24, 0xFD	; 253
     c9a:	80 83       	st	Z, r24
			SET		(DD_B4);
     c9c:	80 81       	ld	r24, Z
     c9e:	81 60       	ori	r24, 0x01	; 1
     ca0:	80 83       	st	Z, r24
     ca2:	08 95       	ret

00000ca4 <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
     ca4:	fc 01       	movw	r30, r24
     ca6:	80 81       	ld	r24, Z
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	b1 f0       	breq	.+44     	; 0xcd8 <_ZN5Motor9StopMotorEv+0x34>
     cac:	18 f4       	brcc	.+6      	; 0xcb4 <_ZN5Motor9StopMotorEv+0x10>
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	31 f0       	breq	.+12     	; 0xcbe <_ZN5Motor9StopMotorEv+0x1a>
     cb2:	08 95       	ret
     cb4:	83 30       	cpi	r24, 0x03	; 3
     cb6:	e9 f0       	breq	.+58     	; 0xcf2 <_ZN5Motor9StopMotorEv+0x4e>
     cb8:	84 30       	cpi	r24, 0x04	; 4
     cba:	41 f1       	breq	.+80     	; 0xd0c <_ZN5Motor9StopMotorEv+0x68>
     cbc:	08 95       	ret
	{
		case 1:
			SET	(DD_F1);
     cbe:	e8 e0       	ldi	r30, 0x08	; 8
     cc0:	f1 e0       	ldi	r31, 0x01	; 1
     cc2:	80 81       	ld	r24, Z
     cc4:	80 64       	ori	r24, 0x40	; 64
     cc6:	80 83       	st	Z, r24
			SET	(DD_B1);
     cc8:	80 81       	ld	r24, Z
     cca:	80 68       	ori	r24, 0x80	; 128
     ccc:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
     cce:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     cd2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     cd6:	08 95       	ret
		case 2:
			SET	(DD_F2);
     cd8:	e8 e0       	ldi	r30, 0x08	; 8
     cda:	f1 e0       	ldi	r31, 0x01	; 1
     cdc:	80 81       	ld	r24, Z
     cde:	88 60       	ori	r24, 0x08	; 8
     ce0:	80 83       	st	Z, r24
			SET	(DD_B2);
     ce2:	80 81       	ld	r24, Z
     ce4:	84 60       	ori	r24, 0x04	; 4
     ce6:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
     ce8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     cec:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     cf0:	08 95       	ret
		case 3:
			SET	(DD_F3);
     cf2:	e8 e0       	ldi	r30, 0x08	; 8
     cf4:	f1 e0       	ldi	r31, 0x01	; 1
     cf6:	80 81       	ld	r24, Z
     cf8:	80 61       	ori	r24, 0x10	; 16
     cfa:	80 83       	st	Z, r24
			SET	(DD_B3);
     cfc:	80 81       	ld	r24, Z
     cfe:	80 62       	ori	r24, 0x20	; 32
     d00:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
     d02:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     d06:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     d0a:	08 95       	ret
		case 4:
			SET	(DD_F4);
     d0c:	e8 e0       	ldi	r30, 0x08	; 8
     d0e:	f1 e0       	ldi	r31, 0x01	; 1
     d10:	80 81       	ld	r24, Z
     d12:	82 60       	ori	r24, 0x02	; 2
     d14:	80 83       	st	Z, r24
			SET	(DD_B4);
     d16:	80 81       	ld	r24, Z
     d18:	81 60       	ori	r24, 0x01	; 1
     d1a:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
     d1c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     d20:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     d24:	08 95       	ret

00000d26 <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	8c 01       	movw	r16, r24
     d30:	eb 01       	movw	r28, r22
    if (Ocr > 0)
     d32:	1c 16       	cp	r1, r28
     d34:	1d 06       	cpc	r1, r29
     d36:	0c f4       	brge	.+2      	; 0xd3a <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
     d38:	53 df       	rcall	.-346    	; 0xbe0 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
     d3a:	c9 3f       	cpi	r28, 0xF9	; 249
     d3c:	d1 05       	cpc	r29, r1
     d3e:	44 f4       	brge	.+16     	; 0xd50 <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
	if( Ocr < 0)
     d40:	dd 23       	and	r29, r29
     d42:	44 f4       	brge	.+16     	; 0xd54 <_ZN5Motor11SetOcrValueEi+0x2e>
	{
        Ocr = -Ocr;
     d44:	d1 95       	neg	r29
     d46:	c1 95       	neg	r28
     d48:	d1 09       	sbc	r29, r1
        SetReverseDirection();
     d4a:	c8 01       	movw	r24, r16
     d4c:	7a df       	rcall	.-268    	; 0xc42 <_ZN5Motor19SetReverseDirectionEv>
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <_ZN5Motor11SetOcrValueEi+0x2e>
void Motor::SetOcrValue(int Ocr)
{
    if (Ocr > 0)
        SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
     d50:	c9 ef       	ldi	r28, 0xF9	; 249
     d52:	d0 e0       	ldi	r29, 0x00	; 0
	if( Ocr < 0)
	{
        Ocr = -Ocr;
        SetReverseDirection();
	}
	switch(num)
     d54:	f8 01       	movw	r30, r16
     d56:	80 81       	ld	r24, Z
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	71 f0       	breq	.+28     	; 0xd78 <_ZN5Motor11SetOcrValueEi+0x52>
     d5c:	18 f4       	brcc	.+6      	; 0xd64 <_ZN5Motor11SetOcrValueEi+0x3e>
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	31 f0       	breq	.+12     	; 0xd6e <_ZN5Motor11SetOcrValueEi+0x48>
     d62:	18 c0       	rjmp	.+48     	; 0xd94 <_ZN5Motor11SetOcrValueEi+0x6e>
     d64:	83 30       	cpi	r24, 0x03	; 3
     d66:	69 f0       	breq	.+26     	; 0xd82 <_ZN5Motor11SetOcrValueEi+0x5c>
     d68:	84 30       	cpi	r24, 0x04	; 4
     d6a:	81 f0       	breq	.+32     	; 0xd8c <_ZN5Motor11SetOcrValueEi+0x66>
     d6c:	13 c0       	rjmp	.+38     	; 0xd94 <_ZN5Motor11SetOcrValueEi+0x6e>
	{
		case 1:
			PWM_OCR1	= Ocr;
     d6e:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     d72:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     d76:	0e c0       	rjmp	.+28     	; 0xd94 <_ZN5Motor11SetOcrValueEi+0x6e>
		case 2:
			PWM_OCR2	= Ocr;
     d78:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     d7c:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     d80:	09 c0       	rjmp	.+18     	; 0xd94 <_ZN5Motor11SetOcrValueEi+0x6e>
		case 3:
			PWM_OCR3	= Ocr;
     d82:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     d86:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <_ZN5Motor11SetOcrValueEi+0x6e>
		case 4:
			PWM_OCR4	= Ocr;
     d8c:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     d90:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
	}
}
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	08 95       	ret

00000d9e <__vector_15>:

/*************************************************************************	
  Interrupt Service Routine for timer overflow for I2C timeout
*************************************************************************/
ISR(TIMER2_OVF_vect)
{
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	8f 93       	push	r24
	_Timer_overflow_count = (_Timer_overflow_count == 3)	?	0	: (_Timer_overflow_count+1);
     daa:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_Timer_overflow_count>
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	21 f0       	breq	.+8      	; 0xdba <__vector_15+0x1c>
     db2:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_Timer_overflow_count>
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <__vector_15+0x1e>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <_Timer_overflow_count>
	if (_Timer_overflow_count	==	3)
     dc0:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_Timer_overflow_count>
     dc4:	83 30       	cpi	r24, 0x03	; 3
     dc6:	19 f4       	brne	.+6      	; 0xdce <__vector_15+0x30>
	{
		_Flag_Timer_overflow = true;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <_Flag_Timer_overflow>
	}
     dce:	8f 91       	pop	r24
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <_Z9initUART2v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
     dda:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_ZL9datacount>
     dde:	e3 e9       	ldi	r30, 0x93	; 147
     de0:	f2 e0       	ldi	r31, 0x02	; 2
     de2:	10 82       	st	Z, r1
     de4:	11 82       	std	Z+1, r1	; 0x01
     de6:	12 82       	std	Z+2, r1	; 0x02
     de8:	13 82       	std	Z+3, r1	; 0x03
     dea:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     dee:	89 e1       	ldi	r24, 0x19	; 25
     df0:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     df4:	88 e9       	ldi	r24, 0x98	; 152
     df6:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     dfa:	86 e0       	ldi	r24, 0x06	; 6
     dfc:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
     e00:	08 95       	ret

00000e02 <__vector_25>:

ISR(USART0_RX_vect)
{
     e02:	1f 92       	push	r1
     e04:	0f 92       	push	r0
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	0f 92       	push	r0
     e0a:	11 24       	eor	r1, r1
     e0c:	0b b6       	in	r0, 0x3b	; 59
     e0e:	0f 92       	push	r0
     e10:	8f 93       	push	r24
     e12:	ef 93       	push	r30
     e14:	ff 93       	push	r31
	

	buffer=UDR0;
     e16:	e6 ec       	ldi	r30, 0xC6	; 198
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <buffer>
	UDR0 = 0;
     e20:	10 82       	st	Z, r1
}
     e22:	ff 91       	pop	r31
     e24:	ef 91       	pop	r30
     e26:	8f 91       	pop	r24
     e28:	0f 90       	pop	r0
     e2a:	0b be       	out	0x3b, r0	; 59
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <__vector_36>:

ISR(USART1_RX_vect)
{
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	8f 93       	push	r24
	buffer1=UDR1;
     e42:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     e46:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <buffer1>
	
}
     e4a:	8f 91       	pop	r24
     e4c:	0f 90       	pop	r0
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <__vector_51>:

ISR(USART2_RX_vect)
{
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	0b b6       	in	r0, 0x3b	; 59
     e62:	0f 92       	push	r0
     e64:	8f 93       	push	r24
     e66:	9f 93       	push	r25
     e68:	ef 93       	push	r30
     e6a:	ff 93       	push	r31
	buffer2=UDR2;
     e6c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     e70:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <buffer2>
		if(rcvflag)
     e74:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <rcvflag>
     e78:	99 23       	and	r25, r25
     e7a:	89 f0       	breq	.+34     	; 0xe9e <__vector_51+0x48>
		{
			rcvdata[datacount] = buffer2;
     e7c:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <_ZL9datacount>
     e80:	e9 2f       	mov	r30, r25
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	ed 56       	subi	r30, 0x6D	; 109
     e86:	fd 4f       	sbci	r31, 0xFD	; 253
     e88:	80 83       	st	Z, r24
			datacount++;
     e8a:	9f 5f       	subi	r25, 0xFF	; 255
			if(datacount>3)
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	18 f4       	brcc	.+6      	; 0xe96 <__vector_51+0x40>
{
	buffer2=UDR2;
		if(rcvflag)
		{
			rcvdata[datacount] = buffer2;
			datacount++;
     e90:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <_ZL9datacount>
     e94:	04 c0       	rjmp	.+8      	; 0xe9e <__vector_51+0x48>
			if(datacount>3)
			{
				 datacount=0;
     e96:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_ZL9datacount>
				rcvflag = false; 
     e9a:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <rcvflag>
			}
		}
		if(buffer2==START_BYTE)
     e9e:	8f 37       	cpi	r24, 0x7F	; 127
     ea0:	19 f4       	brne	.+6      	; 0xea8 <__vector_51+0x52>
			rcvflag=true;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <rcvflag>
		
}
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	0f 90       	pop	r0
     eb2:	0b be       	out	0x3b, r0	; 59
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <__vector_54>:


ISR(USART3_RX_vect)
{
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	0f 92       	push	r0
     ec6:	11 24       	eor	r1, r1
     ec8:	0b b6       	in	r0, 0x3b	; 59
     eca:	0f 92       	push	r0
     ecc:	8f 93       	push	r24
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
	buffer3=UDR3;
     ed2:	e6 e3       	ldi	r30, 0x36	; 54
     ed4:	f1 e0       	ldi	r31, 0x01	; 1
     ed6:	80 81       	ld	r24, Z
     ed8:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <buffer3>
	UDR3 = 0;
     edc:	10 82       	st	Z, r1
	
}
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	8f 91       	pop	r24
     ee4:	0f 90       	pop	r0
     ee6:	0b be       	out	0x3b, r0	; 59
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	1f 90       	pop	r1
     ef0:	18 95       	reti

00000ef2 <__subsf3>:
     ef2:	50 58       	subi	r21, 0x80	; 128

00000ef4 <__addsf3>:
     ef4:	bb 27       	eor	r27, r27
     ef6:	aa 27       	eor	r26, r26
     ef8:	0e d0       	rcall	.+28     	; 0xf16 <__addsf3x>
     efa:	e5 c0       	rjmp	.+458    	; 0x10c6 <__fp_round>
     efc:	d6 d0       	rcall	.+428    	; 0x10aa <__fp_pscA>
     efe:	30 f0       	brcs	.+12     	; 0xf0c <__addsf3+0x18>
     f00:	db d0       	rcall	.+438    	; 0x10b8 <__fp_pscB>
     f02:	20 f0       	brcs	.+8      	; 0xf0c <__addsf3+0x18>
     f04:	31 f4       	brne	.+12     	; 0xf12 <__addsf3+0x1e>
     f06:	9f 3f       	cpi	r25, 0xFF	; 255
     f08:	11 f4       	brne	.+4      	; 0xf0e <__addsf3+0x1a>
     f0a:	1e f4       	brtc	.+6      	; 0xf12 <__addsf3+0x1e>
     f0c:	cb c0       	rjmp	.+406    	; 0x10a4 <__fp_nan>
     f0e:	0e f4       	brtc	.+2      	; 0xf12 <__addsf3+0x1e>
     f10:	e0 95       	com	r30
     f12:	e7 fb       	bst	r30, 7
     f14:	c1 c0       	rjmp	.+386    	; 0x1098 <__fp_inf>

00000f16 <__addsf3x>:
     f16:	e9 2f       	mov	r30, r25
     f18:	e7 d0       	rcall	.+462    	; 0x10e8 <__fp_split3>
     f1a:	80 f3       	brcs	.-32     	; 0xefc <__addsf3+0x8>
     f1c:	ba 17       	cp	r27, r26
     f1e:	62 07       	cpc	r22, r18
     f20:	73 07       	cpc	r23, r19
     f22:	84 07       	cpc	r24, r20
     f24:	95 07       	cpc	r25, r21
     f26:	18 f0       	brcs	.+6      	; 0xf2e <__addsf3x+0x18>
     f28:	71 f4       	brne	.+28     	; 0xf46 <__addsf3x+0x30>
     f2a:	9e f5       	brtc	.+102    	; 0xf92 <__addsf3x+0x7c>
     f2c:	ff c0       	rjmp	.+510    	; 0x112c <__fp_zero>
     f2e:	0e f4       	brtc	.+2      	; 0xf32 <__addsf3x+0x1c>
     f30:	e0 95       	com	r30
     f32:	0b 2e       	mov	r0, r27
     f34:	ba 2f       	mov	r27, r26
     f36:	a0 2d       	mov	r26, r0
     f38:	0b 01       	movw	r0, r22
     f3a:	b9 01       	movw	r22, r18
     f3c:	90 01       	movw	r18, r0
     f3e:	0c 01       	movw	r0, r24
     f40:	ca 01       	movw	r24, r20
     f42:	a0 01       	movw	r20, r0
     f44:	11 24       	eor	r1, r1
     f46:	ff 27       	eor	r31, r31
     f48:	59 1b       	sub	r21, r25
     f4a:	99 f0       	breq	.+38     	; 0xf72 <__addsf3x+0x5c>
     f4c:	59 3f       	cpi	r21, 0xF9	; 249
     f4e:	50 f4       	brcc	.+20     	; 0xf64 <__addsf3x+0x4e>
     f50:	50 3e       	cpi	r21, 0xE0	; 224
     f52:	68 f1       	brcs	.+90     	; 0xfae <__addsf3x+0x98>
     f54:	1a 16       	cp	r1, r26
     f56:	f0 40       	sbci	r31, 0x00	; 0
     f58:	a2 2f       	mov	r26, r18
     f5a:	23 2f       	mov	r18, r19
     f5c:	34 2f       	mov	r19, r20
     f5e:	44 27       	eor	r20, r20
     f60:	58 5f       	subi	r21, 0xF8	; 248
     f62:	f3 cf       	rjmp	.-26     	; 0xf4a <__addsf3x+0x34>
     f64:	46 95       	lsr	r20
     f66:	37 95       	ror	r19
     f68:	27 95       	ror	r18
     f6a:	a7 95       	ror	r26
     f6c:	f0 40       	sbci	r31, 0x00	; 0
     f6e:	53 95       	inc	r21
     f70:	c9 f7       	brne	.-14     	; 0xf64 <__addsf3x+0x4e>
     f72:	7e f4       	brtc	.+30     	; 0xf92 <__addsf3x+0x7c>
     f74:	1f 16       	cp	r1, r31
     f76:	ba 0b       	sbc	r27, r26
     f78:	62 0b       	sbc	r22, r18
     f7a:	73 0b       	sbc	r23, r19
     f7c:	84 0b       	sbc	r24, r20
     f7e:	ba f0       	brmi	.+46     	; 0xfae <__addsf3x+0x98>
     f80:	91 50       	subi	r25, 0x01	; 1
     f82:	a1 f0       	breq	.+40     	; 0xfac <__addsf3x+0x96>
     f84:	ff 0f       	add	r31, r31
     f86:	bb 1f       	adc	r27, r27
     f88:	66 1f       	adc	r22, r22
     f8a:	77 1f       	adc	r23, r23
     f8c:	88 1f       	adc	r24, r24
     f8e:	c2 f7       	brpl	.-16     	; 0xf80 <__addsf3x+0x6a>
     f90:	0e c0       	rjmp	.+28     	; 0xfae <__addsf3x+0x98>
     f92:	ba 0f       	add	r27, r26
     f94:	62 1f       	adc	r22, r18
     f96:	73 1f       	adc	r23, r19
     f98:	84 1f       	adc	r24, r20
     f9a:	48 f4       	brcc	.+18     	; 0xfae <__addsf3x+0x98>
     f9c:	87 95       	ror	r24
     f9e:	77 95       	ror	r23
     fa0:	67 95       	ror	r22
     fa2:	b7 95       	ror	r27
     fa4:	f7 95       	ror	r31
     fa6:	9e 3f       	cpi	r25, 0xFE	; 254
     fa8:	08 f0       	brcs	.+2      	; 0xfac <__addsf3x+0x96>
     faa:	b3 cf       	rjmp	.-154    	; 0xf12 <__addsf3+0x1e>
     fac:	93 95       	inc	r25
     fae:	88 0f       	add	r24, r24
     fb0:	08 f0       	brcs	.+2      	; 0xfb4 <__addsf3x+0x9e>
     fb2:	99 27       	eor	r25, r25
     fb4:	ee 0f       	add	r30, r30
     fb6:	97 95       	ror	r25
     fb8:	87 95       	ror	r24
     fba:	08 95       	ret

00000fbc <__fixsfsi>:
     fbc:	04 d0       	rcall	.+8      	; 0xfc6 <__fixunssfsi>
     fbe:	68 94       	set
     fc0:	b1 11       	cpse	r27, r1
     fc2:	b5 c0       	rjmp	.+362    	; 0x112e <__fp_szero>
     fc4:	08 95       	ret

00000fc6 <__fixunssfsi>:
     fc6:	98 d0       	rcall	.+304    	; 0x10f8 <__fp_splitA>
     fc8:	88 f0       	brcs	.+34     	; 0xfec <__fixunssfsi+0x26>
     fca:	9f 57       	subi	r25, 0x7F	; 127
     fcc:	90 f0       	brcs	.+36     	; 0xff2 <__fixunssfsi+0x2c>
     fce:	b9 2f       	mov	r27, r25
     fd0:	99 27       	eor	r25, r25
     fd2:	b7 51       	subi	r27, 0x17	; 23
     fd4:	a0 f0       	brcs	.+40     	; 0xffe <__fixunssfsi+0x38>
     fd6:	d1 f0       	breq	.+52     	; 0x100c <__fixunssfsi+0x46>
     fd8:	66 0f       	add	r22, r22
     fda:	77 1f       	adc	r23, r23
     fdc:	88 1f       	adc	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	1a f0       	brmi	.+6      	; 0xfe8 <__fixunssfsi+0x22>
     fe2:	ba 95       	dec	r27
     fe4:	c9 f7       	brne	.-14     	; 0xfd8 <__fixunssfsi+0x12>
     fe6:	12 c0       	rjmp	.+36     	; 0x100c <__fixunssfsi+0x46>
     fe8:	b1 30       	cpi	r27, 0x01	; 1
     fea:	81 f0       	breq	.+32     	; 0x100c <__fixunssfsi+0x46>
     fec:	9f d0       	rcall	.+318    	; 0x112c <__fp_zero>
     fee:	b1 e0       	ldi	r27, 0x01	; 1
     ff0:	08 95       	ret
     ff2:	9c c0       	rjmp	.+312    	; 0x112c <__fp_zero>
     ff4:	67 2f       	mov	r22, r23
     ff6:	78 2f       	mov	r23, r24
     ff8:	88 27       	eor	r24, r24
     ffa:	b8 5f       	subi	r27, 0xF8	; 248
     ffc:	39 f0       	breq	.+14     	; 0x100c <__fixunssfsi+0x46>
     ffe:	b9 3f       	cpi	r27, 0xF9	; 249
    1000:	cc f3       	brlt	.-14     	; 0xff4 <__fixunssfsi+0x2e>
    1002:	86 95       	lsr	r24
    1004:	77 95       	ror	r23
    1006:	67 95       	ror	r22
    1008:	b3 95       	inc	r27
    100a:	d9 f7       	brne	.-10     	; 0x1002 <__fixunssfsi+0x3c>
    100c:	3e f4       	brtc	.+14     	; 0x101c <__fixunssfsi+0x56>
    100e:	90 95       	com	r25
    1010:	80 95       	com	r24
    1012:	70 95       	com	r23
    1014:	61 95       	neg	r22
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	8f 4f       	sbci	r24, 0xFF	; 255
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	08 95       	ret

0000101e <__floatunsisf>:
    101e:	e8 94       	clt
    1020:	09 c0       	rjmp	.+18     	; 0x1034 <__floatsisf+0x12>

00001022 <__floatsisf>:
    1022:	97 fb       	bst	r25, 7
    1024:	3e f4       	brtc	.+14     	; 0x1034 <__floatsisf+0x12>
    1026:	90 95       	com	r25
    1028:	80 95       	com	r24
    102a:	70 95       	com	r23
    102c:	61 95       	neg	r22
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	8f 4f       	sbci	r24, 0xFF	; 255
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
    1034:	99 23       	and	r25, r25
    1036:	a9 f0       	breq	.+42     	; 0x1062 <__floatsisf+0x40>
    1038:	f9 2f       	mov	r31, r25
    103a:	96 e9       	ldi	r25, 0x96	; 150
    103c:	bb 27       	eor	r27, r27
    103e:	93 95       	inc	r25
    1040:	f6 95       	lsr	r31
    1042:	87 95       	ror	r24
    1044:	77 95       	ror	r23
    1046:	67 95       	ror	r22
    1048:	b7 95       	ror	r27
    104a:	f1 11       	cpse	r31, r1
    104c:	f8 cf       	rjmp	.-16     	; 0x103e <__floatsisf+0x1c>
    104e:	fa f4       	brpl	.+62     	; 0x108e <__floatsisf+0x6c>
    1050:	bb 0f       	add	r27, r27
    1052:	11 f4       	brne	.+4      	; 0x1058 <__floatsisf+0x36>
    1054:	60 ff       	sbrs	r22, 0
    1056:	1b c0       	rjmp	.+54     	; 0x108e <__floatsisf+0x6c>
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	16 c0       	rjmp	.+44     	; 0x108e <__floatsisf+0x6c>
    1062:	88 23       	and	r24, r24
    1064:	11 f0       	breq	.+4      	; 0x106a <__floatsisf+0x48>
    1066:	96 e9       	ldi	r25, 0x96	; 150
    1068:	11 c0       	rjmp	.+34     	; 0x108c <__floatsisf+0x6a>
    106a:	77 23       	and	r23, r23
    106c:	21 f0       	breq	.+8      	; 0x1076 <__floatsisf+0x54>
    106e:	9e e8       	ldi	r25, 0x8E	; 142
    1070:	87 2f       	mov	r24, r23
    1072:	76 2f       	mov	r23, r22
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <__floatsisf+0x5e>
    1076:	66 23       	and	r22, r22
    1078:	71 f0       	breq	.+28     	; 0x1096 <__floatsisf+0x74>
    107a:	96 e8       	ldi	r25, 0x86	; 134
    107c:	86 2f       	mov	r24, r22
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	2a f0       	brmi	.+10     	; 0x108e <__floatsisf+0x6c>
    1084:	9a 95       	dec	r25
    1086:	66 0f       	add	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	da f7       	brpl	.-10     	; 0x1084 <__floatsisf+0x62>
    108e:	88 0f       	add	r24, r24
    1090:	96 95       	lsr	r25
    1092:	87 95       	ror	r24
    1094:	97 f9       	bld	r25, 7
    1096:	08 95       	ret

00001098 <__fp_inf>:
    1098:	97 f9       	bld	r25, 7
    109a:	9f 67       	ori	r25, 0x7F	; 127
    109c:	80 e8       	ldi	r24, 0x80	; 128
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	08 95       	ret

000010a4 <__fp_nan>:
    10a4:	9f ef       	ldi	r25, 0xFF	; 255
    10a6:	80 ec       	ldi	r24, 0xC0	; 192
    10a8:	08 95       	ret

000010aa <__fp_pscA>:
    10aa:	00 24       	eor	r0, r0
    10ac:	0a 94       	dec	r0
    10ae:	16 16       	cp	r1, r22
    10b0:	17 06       	cpc	r1, r23
    10b2:	18 06       	cpc	r1, r24
    10b4:	09 06       	cpc	r0, r25
    10b6:	08 95       	ret

000010b8 <__fp_pscB>:
    10b8:	00 24       	eor	r0, r0
    10ba:	0a 94       	dec	r0
    10bc:	12 16       	cp	r1, r18
    10be:	13 06       	cpc	r1, r19
    10c0:	14 06       	cpc	r1, r20
    10c2:	05 06       	cpc	r0, r21
    10c4:	08 95       	ret

000010c6 <__fp_round>:
    10c6:	09 2e       	mov	r0, r25
    10c8:	03 94       	inc	r0
    10ca:	00 0c       	add	r0, r0
    10cc:	11 f4       	brne	.+4      	; 0x10d2 <__fp_round+0xc>
    10ce:	88 23       	and	r24, r24
    10d0:	52 f0       	brmi	.+20     	; 0x10e6 <__fp_round+0x20>
    10d2:	bb 0f       	add	r27, r27
    10d4:	40 f4       	brcc	.+16     	; 0x10e6 <__fp_round+0x20>
    10d6:	bf 2b       	or	r27, r31
    10d8:	11 f4       	brne	.+4      	; 0x10de <__fp_round+0x18>
    10da:	60 ff       	sbrs	r22, 0
    10dc:	04 c0       	rjmp	.+8      	; 0x10e6 <__fp_round+0x20>
    10de:	6f 5f       	subi	r22, 0xFF	; 255
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	8f 4f       	sbci	r24, 0xFF	; 255
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	08 95       	ret

000010e8 <__fp_split3>:
    10e8:	57 fd       	sbrc	r21, 7
    10ea:	90 58       	subi	r25, 0x80	; 128
    10ec:	44 0f       	add	r20, r20
    10ee:	55 1f       	adc	r21, r21
    10f0:	59 f0       	breq	.+22     	; 0x1108 <__fp_splitA+0x10>
    10f2:	5f 3f       	cpi	r21, 0xFF	; 255
    10f4:	71 f0       	breq	.+28     	; 0x1112 <__fp_splitA+0x1a>
    10f6:	47 95       	ror	r20

000010f8 <__fp_splitA>:
    10f8:	88 0f       	add	r24, r24
    10fa:	97 fb       	bst	r25, 7
    10fc:	99 1f       	adc	r25, r25
    10fe:	61 f0       	breq	.+24     	; 0x1118 <__fp_splitA+0x20>
    1100:	9f 3f       	cpi	r25, 0xFF	; 255
    1102:	79 f0       	breq	.+30     	; 0x1122 <__fp_splitA+0x2a>
    1104:	87 95       	ror	r24
    1106:	08 95       	ret
    1108:	12 16       	cp	r1, r18
    110a:	13 06       	cpc	r1, r19
    110c:	14 06       	cpc	r1, r20
    110e:	55 1f       	adc	r21, r21
    1110:	f2 cf       	rjmp	.-28     	; 0x10f6 <__fp_split3+0xe>
    1112:	46 95       	lsr	r20
    1114:	f1 df       	rcall	.-30     	; 0x10f8 <__fp_splitA>
    1116:	08 c0       	rjmp	.+16     	; 0x1128 <__fp_splitA+0x30>
    1118:	16 16       	cp	r1, r22
    111a:	17 06       	cpc	r1, r23
    111c:	18 06       	cpc	r1, r24
    111e:	99 1f       	adc	r25, r25
    1120:	f1 cf       	rjmp	.-30     	; 0x1104 <__fp_splitA+0xc>
    1122:	86 95       	lsr	r24
    1124:	71 05       	cpc	r23, r1
    1126:	61 05       	cpc	r22, r1
    1128:	08 94       	sec
    112a:	08 95       	ret

0000112c <__fp_zero>:
    112c:	e8 94       	clt

0000112e <__fp_szero>:
    112e:	bb 27       	eor	r27, r27
    1130:	66 27       	eor	r22, r22
    1132:	77 27       	eor	r23, r23
    1134:	cb 01       	movw	r24, r22
    1136:	97 f9       	bld	r25, 7
    1138:	08 95       	ret

0000113a <__mulsf3>:
    113a:	0b d0       	rcall	.+22     	; 0x1152 <__mulsf3x>
    113c:	c4 cf       	rjmp	.-120    	; 0x10c6 <__fp_round>
    113e:	b5 df       	rcall	.-150    	; 0x10aa <__fp_pscA>
    1140:	28 f0       	brcs	.+10     	; 0x114c <__mulsf3+0x12>
    1142:	ba df       	rcall	.-140    	; 0x10b8 <__fp_pscB>
    1144:	18 f0       	brcs	.+6      	; 0x114c <__mulsf3+0x12>
    1146:	95 23       	and	r25, r21
    1148:	09 f0       	breq	.+2      	; 0x114c <__mulsf3+0x12>
    114a:	a6 cf       	rjmp	.-180    	; 0x1098 <__fp_inf>
    114c:	ab cf       	rjmp	.-170    	; 0x10a4 <__fp_nan>
    114e:	11 24       	eor	r1, r1
    1150:	ee cf       	rjmp	.-36     	; 0x112e <__fp_szero>

00001152 <__mulsf3x>:
    1152:	ca df       	rcall	.-108    	; 0x10e8 <__fp_split3>
    1154:	a0 f3       	brcs	.-24     	; 0x113e <__mulsf3+0x4>

00001156 <__mulsf3_pse>:
    1156:	95 9f       	mul	r25, r21
    1158:	d1 f3       	breq	.-12     	; 0x114e <__mulsf3+0x14>
    115a:	95 0f       	add	r25, r21
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	55 1f       	adc	r21, r21
    1160:	62 9f       	mul	r22, r18
    1162:	f0 01       	movw	r30, r0
    1164:	72 9f       	mul	r23, r18
    1166:	bb 27       	eor	r27, r27
    1168:	f0 0d       	add	r31, r0
    116a:	b1 1d       	adc	r27, r1
    116c:	63 9f       	mul	r22, r19
    116e:	aa 27       	eor	r26, r26
    1170:	f0 0d       	add	r31, r0
    1172:	b1 1d       	adc	r27, r1
    1174:	aa 1f       	adc	r26, r26
    1176:	64 9f       	mul	r22, r20
    1178:	66 27       	eor	r22, r22
    117a:	b0 0d       	add	r27, r0
    117c:	a1 1d       	adc	r26, r1
    117e:	66 1f       	adc	r22, r22
    1180:	82 9f       	mul	r24, r18
    1182:	22 27       	eor	r18, r18
    1184:	b0 0d       	add	r27, r0
    1186:	a1 1d       	adc	r26, r1
    1188:	62 1f       	adc	r22, r18
    118a:	73 9f       	mul	r23, r19
    118c:	b0 0d       	add	r27, r0
    118e:	a1 1d       	adc	r26, r1
    1190:	62 1f       	adc	r22, r18
    1192:	83 9f       	mul	r24, r19
    1194:	a0 0d       	add	r26, r0
    1196:	61 1d       	adc	r22, r1
    1198:	22 1f       	adc	r18, r18
    119a:	74 9f       	mul	r23, r20
    119c:	33 27       	eor	r19, r19
    119e:	a0 0d       	add	r26, r0
    11a0:	61 1d       	adc	r22, r1
    11a2:	23 1f       	adc	r18, r19
    11a4:	84 9f       	mul	r24, r20
    11a6:	60 0d       	add	r22, r0
    11a8:	21 1d       	adc	r18, r1
    11aa:	82 2f       	mov	r24, r18
    11ac:	76 2f       	mov	r23, r22
    11ae:	6a 2f       	mov	r22, r26
    11b0:	11 24       	eor	r1, r1
    11b2:	9f 57       	subi	r25, 0x7F	; 127
    11b4:	50 40       	sbci	r21, 0x00	; 0
    11b6:	8a f0       	brmi	.+34     	; 0x11da <__mulsf3_pse+0x84>
    11b8:	e1 f0       	breq	.+56     	; 0x11f2 <__mulsf3_pse+0x9c>
    11ba:	88 23       	and	r24, r24
    11bc:	4a f0       	brmi	.+18     	; 0x11d0 <__mulsf3_pse+0x7a>
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	bb 1f       	adc	r27, r27
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	50 40       	sbci	r21, 0x00	; 0
    11ce:	a9 f7       	brne	.-22     	; 0x11ba <__mulsf3_pse+0x64>
    11d0:	9e 3f       	cpi	r25, 0xFE	; 254
    11d2:	51 05       	cpc	r21, r1
    11d4:	70 f0       	brcs	.+28     	; 0x11f2 <__mulsf3_pse+0x9c>
    11d6:	60 cf       	rjmp	.-320    	; 0x1098 <__fp_inf>
    11d8:	aa cf       	rjmp	.-172    	; 0x112e <__fp_szero>
    11da:	5f 3f       	cpi	r21, 0xFF	; 255
    11dc:	ec f3       	brlt	.-6      	; 0x11d8 <__mulsf3_pse+0x82>
    11de:	98 3e       	cpi	r25, 0xE8	; 232
    11e0:	dc f3       	brlt	.-10     	; 0x11d8 <__mulsf3_pse+0x82>
    11e2:	86 95       	lsr	r24
    11e4:	77 95       	ror	r23
    11e6:	67 95       	ror	r22
    11e8:	b7 95       	ror	r27
    11ea:	f7 95       	ror	r31
    11ec:	e7 95       	ror	r30
    11ee:	9f 5f       	subi	r25, 0xFF	; 255
    11f0:	c1 f7       	brne	.-16     	; 0x11e2 <__mulsf3_pse+0x8c>
    11f2:	fe 2b       	or	r31, r30
    11f4:	88 0f       	add	r24, r24
    11f6:	91 1d       	adc	r25, r1
    11f8:	96 95       	lsr	r25
    11fa:	87 95       	ror	r24
    11fc:	97 f9       	bld	r25, 7
    11fe:	08 95       	ret

00001200 <__tablejump2__>:
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	88 1f       	adc	r24, r24
    1206:	8b bf       	out	0x3b, r24	; 59
    1208:	07 90       	elpm	r0, Z+
    120a:	f6 91       	elpm	r31, Z
    120c:	e0 2d       	mov	r30, r0
    120e:	19 94       	eijmp

00001210 <_exit>:
    1210:	f8 94       	cli

00001212 <__stop_program>:
    1212:	ff cf       	rjmp	.-2      	; 0x1212 <__stop_program>
